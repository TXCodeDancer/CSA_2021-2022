{
  "summary" : "#AP CSA Java course: Using Objects\n- The course covers creation and use of Java objects.\n- The course is based on CSAwesome Unit 2.",
  "title" : "CSAJava.02.Objects",
  "authors" : [
    "Rick V Brunson, Team Brunson Software, LLC"
  ],
  "programming_language" : "JAVA",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "2.1 Objects - Intances of Classes",
      "task_list" : [
        {
          "name" : "Cat Class Usage",
          "files" : {
            "test/output.txt" : {
              "name" : "test/output.txt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "\nThe default Cat is:\n, the -2147483648-year-old  cat, is not sleeping.\n\nMy cats are:\nPanda, the 16-year-old black and white cat, is not sleeping.\nRusty, the 15-year-old orange tabby cat, is not sleeping.\nBen, the 18-year-old black and white cat, is not sleeping.\nBowie, the 13-year-old white cat, is not sleeping.\n\nMy cats are:\nPanda, the 16-year-old black and white cat, is sleeping.\nRusty, the 15-year-old orange tabby cat, is not sleeping.\nBen, the 18-year-old black and white cat, is not sleeping.\nBowie, the 13-year-old white cat, is sleeping.\n"
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [
                {
                  "offset" : 918,
                  "length" : 65,
                  "possible_answer" : "  bowie.sleeps();",
                  "placeholder_text" : "/* TODO Change Bowies's status to record that he is sleeping.  */"
                },
                {
                  "offset" : 1259,
                  "length" : 74,
                  "possible_answer" : "   System.out.println(cat);",
                  "placeholder_text" : "/* TODO Print each cat's information to the console on a separate line. */"
                }
              ],
              "is_visible" : true,
              "text" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        // Create instance of class with no-argument constructor\n        Cat myCat = new Cat();\n        System.out.println();\n        System.out.println(\"The default Cat is:\");\n        System.out.println(myCat);\n\n        // Create instance of class with argument constructor\n        Cat panda = new Cat(\"Panda\", 16, \"black and white\");\n        Cat rusty = new Cat(\"Rusty\", 15, \"orange tabby\");\n        Cat ben = new Cat(\"Ben\", 18, \"black and white\");\n        Cat bowie = new Cat(\"Bowie\", 13, \"white\");\n\n        // Create a list of my cats\n        List<Cat> myCats = new ArrayList<>();\n        myCats.add(panda);\n        myCats.add(rusty);\n        myCats.add(ben);\n        myCats.add(bowie);\n\n        outputMyCats(myCats);\n\n        // Panda and Bowie are now sleeping\n        panda.sleeps();\n      /* TODO Change Bowies's status to record that he is sleeping.  */\n\n        outputMyCats(myCats);\n\n    }\n\n    // Output information about each of my cats\n    private static void outputMyCats(List<Cat> myCats)\n    {\n        System.out.println();\n        System.out.println(\"My cats are:\");\n        for (Object cat : myCats)\n        {\n         /* TODO Print each cat's information to the console on a separate line. */\n        }\n    }\n}"
            },
            "src/Cat.java" : {
              "name" : "src/Cat.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// Don't change this class\npublic class Cat {\n    // Implement instance variables\n    private final String name;\n    private int age;\n    private final String color;\n    private boolean isSleeping;\n\n    public Cat() // Default constructor\n    {\n        this.name = \"\";\n        this.age = Integer.MIN_VALUE;\n        this.color = \"\";\n        this.isSleeping = false;\n    }\n\n    public Cat(String name, int age, String color) // Initializing constructor\n    {\n        // Assign input parameters values to corresponding instance variables\n        this.name = name;\n        this.age = age;\n        this.color = color;\n\n        // Set default instance variables\n        this.isSleeping = false;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Implement class methods\n    public void sleeps(){ isSleeping = true; }\n    public void wokeUp() { isSleeping = false;}\n    private String sleeping()\n    {\n        if (isSleeping) {\n            return \"is sleeping.\";\n        }\n        else {\n            return \"is not sleeping.\";\n        }\n    }\n\n    @Override\n    public String toString() {\n        return name + \", the \" + age + \"-year-old \" + color + \" cat, \" + sleeping();\n    }\n}"
            }
          },
          "description_text" : "<html>\r\n<body style=\"font-size:1em;\">\r\n\r\n<h2>Cat Class: What are Objects and Classes?</h2>\r\n\r\n<p>The goal of this task is to help you become familiar with Java <strong>classes</strong>\r\n    and using instances of Java classes called <strong>objects</strong>.\r\n    this task includes two classes, Main and Cat. Your objective is to write the missing\r\n    code in the Main class to:\r\n</p>\r\n<ul>\r\n    <li>Output information for each cat instance to the console.</li>\r\n    <li>Modify the status of the cat named <strong>Ben</strong> to record that he is sleeping. </li>\r\n</ul>\r\n<div class=\"hint\">\r\n    Review how the default cat's information was output using <code>System.out.println()</code>.\r\n</div>\r\n<div class=\"hint\">\r\n    Review how the panda cat status was set to sleeping.\r\n</div>\r\n\r\n<p>References:</p>\r\n<ul>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-1-objects-intro-turtles.html\">2.1. Objects - Instances of Classes</a></li>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-2-constructors.html\">2.2. Creating and Initializing Objects: Constructors</a></li>\r\n</ul>\r\n\r\n<p>Check your modified Main class by clicking the <strong>'Check'</strong> button at the bottom of this page.</p>\r\n\r\n</body>\r\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "output"
        },
        {
          "name" : "Cat Class Implementation",
          "files" : {
            "src/Cat.java" : {
              "name" : "src/Cat.java",
              "placeholders" : [
                {
                  "offset" : 55,
                  "length" : 77,
                  "possible_answer" : "    private final String name;\n    private int age;\n    private final String color;\n    private boolean isSleeping;",
                  "placeholder_text" : "/* TODO Implement instance variables here: name, age, color and isSleeping */"
                },
                {
                  "offset" : 204,
                  "length" : 44,
                  "possible_answer" : "        this.age = Integer.MIN_VALUE;\n        this.color = \"\";",
                  "placeholder_text" : "/* TODO Implement missing initializations */"
                },
                {
                  "offset" : 452,
                  "length" : 44,
                  "possible_answer" : "        this.name = name;\n        this.age = age;",
                  "placeholder_text" : "/* TODO Implement missing initializations */"
                },
                {
                  "offset" : 568,
                  "length" : 44,
                  "possible_answer" : "        this.isSleeping = false;",
                  "placeholder_text" : "/* TODO Implement missing initializations */"
                },
                {
                  "offset" : 751,
                  "length" : 83,
                  "possible_answer" : "        isSleeping = true;",
                  "placeholder_text" : "/* TODO Implement modify instance variable to indicated that the cat is sleeping */"
                }
              ],
              "is_visible" : true,
              "text" : "public class Cat\n{\n    // Implement instance variables\n/* TODO Implement instance variables here: name, age, color and isSleeping */\n\n    public Cat() // Default constructor\n    {\n        this.name = \"\";\n/* TODO Implement missing initializations */\n        this.isSleeping = false;\n    }\n\n    public Cat(String name, int age, String color) // Initializing constructor\n    {\n        // Assign input parameters values to corresponding instance variables\n/* TODO Implement missing initializations */\n        this.color = color;\n\n        // Set default instance variables\n/* TODO Implement missing initializations */\n    }\n\n    public void setAge(int age)\n    {\n        this.age = age;\n    }\n\n    // Implement class methods\n    public void sleeps()\n    {\n/* TODO Implement modify instance variable to indicated that the cat is sleeping */\n    }\n\n    public void wokeUp()\n    {\n        isSleeping = false;\n    }\n\n    private String sleeping()\n    {\n        if (isSleeping)\n        {\n            return \"is sleeping.\";\n        } else\n        {\n            return \"is not sleeping.\";\n        }\n    }\n\n    @Override\n    public String toString()\n    {\n        return name + \", the \" + age + \"-year-old \" + color + \" cat, \" + sleeping();\n    }\n}"
            },
            "test/CatTests.java" : {
              "name" : "test/CatTests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class CatTests {\n  @Test\n  public void testDefault() {\n    // put your test here\n    Cat cat = new Cat();\n    String actual = cat.toString();\n    String expected = \", the -2147483648-year-old  cat, is not sleeping.\";\n    assertEquals(expected, actual);\n  }\n\n  @Test\n  public void testParameterConstructor() {\n    // put your test here\n    Cat cat = new Cat(\"Ben\", 18, \"black and white\");\n    String actual = cat.toString();\n    String expected = \"Ben, the 18-year-old black and white cat, is not sleeping.\";\n    assertEquals(expected, actual);\n  }\n\n  @Test\n  public void testIsSleeping() {\n    // put your test here\n    Cat cat = new Cat(\"Ben\", 18, \"black and white\");\n    cat.sleeps();\n    String actual = cat.toString();\n    String expected = \"Ben, the 18-year-old black and white cat, is sleeping.\";\n    assertEquals(expected, actual);\n  }\n}"
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "import java.util.ArrayList;\nimport java.util.List;\n\n// This class will not be graded. Feel free to experiment creating and modifying Cat objects.\npublic class Main {\n    public static void main(String[] args)\n    {\n        Cat myCat = new Cat();\n        System.out.println();\n        System.out.println(\"A default Cat is:\");\n        System.out.println(myCat);\n\n        List<Cat> cats = new ArrayList<Cat>();\n        cats.add(new Cat(\"Some Name\", 1, \"some color\"));\n\n        System.out.println();\n        System.out.println(\"My cats are:\");\n        for(Object cat : cats)\n        {\n            System.out.println(cat);\n        }\n    }\n}\n"
            }
          },
          "description_text" : "<html>\r\n<body style=\"font-size:1em;\">\r\n\r\n<h2>Cat Class: Instance Variables & Methods</h2>\r\n<p>Implement the Cat class by adding <strong>instance variables</strong> (attributes) and <strong>methods</strong>\r\n    (behaviors).</p>\r\n\r\n<p>Implement the following instance variables (attributes):</p>\r\n<ul>\r\n    <li><strong>name</strong> as a string.</li>\r\n    <li><strong>age</strong> as an int.</li>\r\n    <li><strong>color</strong> as a string.</li>\r\n    <li><strong>isSleeping</strong> as a boolean</li>\r\n</ul>\r\n\r\n<p>Implement the following methods (behaviors):</p>\r\n<ul>\r\n    <li>Public <strong>Cat</strong> constructor without parameters:</li>\r\n    <ul><li>Set name = \"\" </li></ul>\r\n    <ul><li>Set age = Integer.MIN_VALUE </li></ul>\r\n    <ul><li>Set color = \"\" </li></ul>\r\n    <ul><li>Set isSleeping = false </li></ul>\r\n    <li>Public <strong>Cat</strong> constructor with parameters: public Cat(String name, int age, String color)</li>\r\n    <ul><li>Set name = name </li></ul>\r\n    <ul><li>Set age = age </li></ul>\r\n    <ul><li>Set color = color </li></ul>\r\n    <ul><li>Set isSleeping = false </li></ul>\r\n    <li>Public <strong>sleeps()</strong> method:</li>\r\n    <ul><li>Set isSleeping = true </li></ul>\r\n</ul>\r\n\r\n<div class=\"hint\">\r\n    When a class method parameter has the same as the class instance variable,\r\n    use this.varName = varName to set the class instance variable.\r\n    For example:\r\n    <ul><code>this.name = name;</code></ul>\r\n</div>\r\n\r\n<p>References:</p>\r\n<ul>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-1-objects-intro-turtles.html\">2.1. Objects - Instances of Classes</a></li>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-2-constructors.html\">2.2. Creating and Initializing Objects: Constructors</a></li>\r\n</ul>\r\n\r\n<p>Check your modified Main class by clicking the <strong>'Check'</strong> button at the bottom of this page.</p>\r\n</body>\r\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "choiceOptions" : [
            {
              "text" : "peach - fruit",
              "status" : "INCORRECT"
            },
            {
              "text" : "fruit - peach",
              "status" : "CORRECT"
            },
            {
              "text" : "mammal - squirrel",
              "status" : "CORRECT"
            },
            {
              "text" : "pencil - writingUtensil",
              "status" : "INCORRECT"
            }
          ],
          "isMultipleChoice" : true,
          "name" : "Exit Ticket - 1",
          "files" : {
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Main {\n   public static void main(String[] args) {\n      // Write your solution here\n   }\n}"
            }
          },
          "description_text" : "<html>\r\n<body style=\"font-size:1em;\">\r\n\r\n<h2>Unit 2 Lesson 1 Exit Ticket: 1</h2>\r\n<p>Select the pairs below that represent the relationship Class - Object</ol></p>\r\n\r\n<p>References:</p>\r\n<ul>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-1-objects-intro-turtles.html\">2.1. Objects - Instances of Classes</a></li>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-2-constructors.html\">2.2. Creating and Initializing Objects: Constructors</a></li>\r\n</ul>\r\n\r\n</body>\r\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "choice"
        },
        {
          "choiceOptions" : [
            {
              "text" : "forward()",
              "status" : "CORRECT"
            },
            {
              "text" : "Backward()",
              "status" : "INCORRECT"
            },
            {
              "text" : "pendown()",
              "status" : "INCORRECT"
            },
            {
              "text" : "turn(degrees: double)",
              "status" : "CORRECT"
            },
            {
              "text" : "MoveTo(x: int, y: int)",
              "status" : "INCORRECT"
            },
            {
              "text" : "flip()",
              "status" : "INCORRECT"
            },
            {
              "text" : "moveTo(x: int, y: int)",
              "status" : "CORRECT"
            },
            {
              "text" : "turnRight()",
              "status" : "CORRECT"
            },
            {
              "text" : "turnleft()",
              "status" : "INCORRECT"
            }
          ],
          "isMultipleChoice" : true,
          "name" : "Exit Ticket - 2",
          "files" : {
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Main {\n   public static void main(String[] args) {\n      // Write your solution here\n   }\n}"
            }
          },
          "description_text" : "<html>\r\n<body style=\"font-size:1em;\">\r\n\r\n<h2>Unit 2 Lesson 1 Exit Ticket: 2</h2>\r\n<p>Select all methods of the Turtle object below</p>\r\n\r\n<p>References:</p>\r\n<ul>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-1-objects-intro-turtles.html\">2.1. Objects - Instances of Classes</a></li>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-2-constructors.html\">2.2. Creating and Initializing Objects: Constructors</a></li>\r\n</ul>\r\n\r\n</body>\r\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "choice"
        },
        {
          "name" : "Exit Ticket - 3",
          "files" : {
            "src/Fraction.java" : {
              "name" : "src/Fraction.java",
              "placeholders" : [
                {
                  "offset" : 24,
                  "length" : 39,
                  "possible_answer" : "    private double numerator;\n    private double denominator;",
                  "placeholder_text" : "/* TODO Implement instance variables */"
                },
                {
                  "offset" : 86,
                  "length" : 23,
                  "possible_answer" : "double",
                  "placeholder_text" : "/* TODO Declare type */"
                },
                {
                  "offset" : 121,
                  "length" : 23,
                  "possible_answer" : "double",
                  "placeholder_text" : "/* TODO Declare type */"
                },
                {
                  "offset" : 164,
                  "length" : 40,
                  "possible_answer" : "        this.numerator = numerator;\n        this.denominator = denominator;",
                  "placeholder_text" : "/* TODO Initialize instance variables */"
                },
                {
                  "offset" : 223,
                  "length" : 23,
                  "possible_answer" : "double",
                  "placeholder_text" : "/* TODO Declare type */"
                },
                {
                  "offset" : 262,
                  "length" : 63,
                  "possible_answer" : "        return numerator/ denominator;",
                  "placeholder_text" : "/* TODO Implement method to return decimal value of fraction */"
                }
              ],
              "is_visible" : true,
              "text" : "public class Fraction {\n/* TODO Implement instance variables */\n\n\n    public Fraction(/* TODO Declare type */ numerator, /* TODO Declare type */ denominator)\n    {\n/* TODO Initialize instance variables */\n    }\n\n    public /* TODO Declare type */ getDecimal() {\n/* TODO Implement method to return decimal value of fraction */\n    }\n}"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\n\npublic class Tests {\n  double epsilon = 0.000001d;\n\n  @Test\n  public void testSolution() {\n    Fraction fraction = new Fraction(1, 3);\n    double actual = fraction.getDecimal();\n    double expected = 1.0/3.0;\n    assertEquals(expected, actual, epsilon);\n  }\n}"
            }
          },
          "description_text" : "<html>\r\n<body style=\"font-size:1em;\">\r\n\r\n<h2>Unit 2 Lesson 1 Exit Ticket: Fraction Class</h2>\r\n\r\n<p>Implement a class that computes the fraction of two numbers.\r\n</p>\r\n<ul>\r\n    <li>Create the Fraction class constructor to accept the <strong>numerator</strong>\r\n        and <strong>denominator</strong>.</li>\r\n    <ul><li><code>public Fraction(type numerator, type denominator)</code> </li></ul>\r\n    <ul><li>Create/initialize instance variables to represent these values </li></ul>\r\n    <li>Create a Fraction class method named getDecimal() that returns the value of the fraction as a decimal.</li>\r\n\r\n</ul>\r\n<div class=\"hint\">\r\n    <code>public type getDecimal()</code>\r\n\r\n</div>\r\n<div class=\"hint\">\r\n    Be sure to use the correct numeric return type.\r\n</div>\r\n\r\n<p>References:</p>\r\n<ul>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-1-objects-intro-turtles.html\">2.1. Objects - Instances of Classes</a></li>\r\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-2-constructors.html\">2.2. Creating and Initializing Objects: Constructors</a></li>\r\n</ul>\r\n\r\n<p>Check your modified Main class by clicking the <strong>'Check'</strong> button at the bottom of this page.</p>\r\n\r\n</body>\r\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n}\r\n\r\ndef printOutput(def output) {\r\n    return tasks.create(\"printOutput\") {\r\n        println \"#educational_plugin_checker_version 1\"\r\n        def separator = System.lineSeparator()\r\n        def lines = output.toString().split(\"(?<=${separator})|(?=${separator})\")\r\n        for (line in lines) {\r\n            println \"#educational_plugin\" + line\r\n        }\r\n    }\r\n}\r\n\r\nsubprojects {\r\n    apply plugin: 'application'\r\n    apply plugin: 'java'\r\n\r\n    sourceCompatibility = 1.8\r\n\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n\r\n    dependencies {\r\n        testImplementation group: 'junit', name: 'junit', version: '4.12'\r\n    }\r\n\r\n    sourceSets {\r\n        main {\r\n            java.srcDir 'src'\r\n        }\r\n        test {\r\n            java.srcDir 'test'\r\n        }\r\n    }\r\n\r\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\r\n\r\n    if (project.hasProperty(\"educationalRun\") && \"true\".equalsIgnoreCase(project.getProperty(\"educationalRun\"))) {\r\n        def runOutput = new ByteArrayOutputStream()\r\n        tasks.run.setStandardOutput(runOutput)\r\n        tasks.run.doLast { printOutput(runOutput) }\r\n    }\r\n}\r\n\r\nproject(':util') {\r\n    dependencies {\r\n        implementation group: 'junit', name: 'junit', version: '4.12'\r\n    }\r\n}\r\n\r\nconfigure(subprojects.findAll { it.name != 'util' }) {\r\n    dependencies {\r\n        implementation project(':util').sourceSets.main.output\r\n        testImplementation project(':util').sourceSets.test.output\r\n    }\r\n}\r\n"
    },
    {
      "name" : "settings.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "static String sanitizeName(String name) {\r\n    return name.replaceAll(\"[ /\\\\\\\\:<>\\\"?*|()]\", \"_\").replaceAll(\"(^[.]+)|([.]+\\$)\", \"\")\r\n}\r\n\r\nrootProject.name = 'CSAJava.02.01.Objects'\r\n\r\nrootProject.projectDir.eachDirRecurse {\r\n    if (!isTaskDir(it) || it.path.contains(\".idea\")) {\r\n        return\r\n    }\r\n    def taskRelativePath = rootDir.toPath().relativize(it.toPath())\r\n    def parts = []\r\n    for (name in taskRelativePath) {\r\n        parts.add(sanitizeName(name.toString()))\r\n    }\r\n    def moduleName =  parts.join(\"-\")\r\n    include \"$moduleName\"\r\n    project(\":$moduleName\").projectDir = it\r\n}\r\n\r\ndef isTaskDir(File dir) {\r\n    return new File(dir, \"src\").exists()\r\n}\r\n\r\ninclude 'util'"
    }
  ],
  "version" : 11
}