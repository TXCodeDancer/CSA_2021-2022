{
  "summary" : "#AP CSA Java course: Using Objects\n- The course covers creation and use of Java objects.\n- The course is based on CSAwesome Unit 2.",
  "title" : "CSAJava.02.Objects",
  "programming_language" : "JAVA",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "2.1 Objects - Intances of Classes",
      "task_list" : [
        {
          "name" : "Cat Class",
          "files" : {
            "test/output.txt" : {
              "name" : "test/output.txt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "\nThe default Cat is:\n, the -2147483648-year-old  cat, is not sleeping.\n\nMy cats are:\nPanda, the 16-year-old black and white cat, is not sleeping.\nRusty, the 15-year-old orange tabby cat, is not sleeping.\nBen, the 18-year-old black and white cat, is not sleeping.\nBowie, the 13-year-old white cat, is not sleeping.\n\nMy cats are:\nPanda, the 16-year-old black and white cat, is sleeping.\nRusty, the 15-year-old orange tabby cat, is not sleeping.\nBen, the 18-year-old black and white cat, is sleeping.\nBowie, the 13-year-old white cat, is not sleeping.\n"
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [
                {
                  "offset" : 880,
                  "length" : 61,
                  "possible_answer" : "ben.sleeps();",
                  "placeholder_text" : "/* TODO Change Ben''s status to note that he is sleeping.  */"
                },
                {
                  "offset" : 1199,
                  "length" : 75,
                  "possible_answer" : "System.out.println(cat);",
                  "placeholder_text" : "/* TODO Print each cat''s information to the console on a separate line. */"
                }
              ],
              "is_visible" : true,
              "text" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n   public static void main(String[] args) {\n\n      // Create instance of class with no-argument constructor\n      Cat myCat = new Cat();\n      System.out.println();\n      System.out.println(\"The default Cat is:\");\n      System.out.println(myCat);\n\n      // Create instance of class with argument constructor\n      Cat panda  = new Cat(\"Panda\", 16, \"black and white\");\n      Cat rusty  = new Cat(\"Rusty\", 15, \"orange tabby\");\n      Cat ben    = new Cat(\"Ben\", 18, \"black and white\");\n      Cat bowie  = new Cat(\"Bowie\", 13, \"white\");\n\n      // Create a list of my cats\n      List<Cat> myCats = new ArrayList<>();\n      myCats.add(panda);\n      myCats.add(rusty);\n      myCats.add(ben);\n      myCats.add(bowie);\n\n      outputMyCats(myCats);\n\n      // Panda and Ben are now sleeping\n      panda.sleeps();\n      /* TODO Change Ben''s status to note that he is sleeping.  */\n\n      outputMyCats(myCats);\n\n   }\n\n   // Output information about each of my cats\n   private static void outputMyCats(List<Cat> myCats) {\n      System.out.println();\n      System.out.println(\"My cats are:\");\n      for(Object cat : myCats)\n      {\n         /* TODO Print each cat''s information to the console on a separate line. */\n      }\n   }\n}"
            },
            "src/Cat.java" : {
              "name" : "src/Cat.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// Don't change this class\npublic class Cat {\n    // Implement instance variables\n    private final String name;\n    private int age;\n    private final String color;\n    private boolean isSleeping;\n\n    public Cat() // Default constructor\n    {\n        this.name = \"\";\n        this.age = Integer.MIN_VALUE;\n        this.color = \"\";\n        this.isSleeping = false;\n    }\n\n    public Cat(String name, int age, String color) // Initializing constructor\n    {\n        // Assign input parameters values to corresponding instance variables\n        this.name = name;\n        this.age = age;\n        this.color = color;\n\n        // Set default instance variables\n        this.isSleeping = false;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Implement class methods\n    public void sleeps(){ isSleeping = true; }\n    public void wokeUp() { isSleeping = false;}\n    private String sleeping()\n    {\n        if (isSleeping) {\n            return \"is sleeping.\";\n        }\n        else {\n            return \"is not sleeping.\";\n        }\n    }\n\n    @Override\n    public String toString() {\n        return name + \", the \" + age + \"-year-old \" + color + \" cat, \" + sleeping();\n    }\n}"
            }
          },
          "description_text" : "<html>\n\n<h2>Cat Class: What are Objects and Classes</h2>\n\n<p>The goal of this task is to help you become familiar with Java <strong>classes</strong>\n    and using instances of Java classes called <strong>objects</strong>.\n    this task includes two classes, Main and Cat. Your objective is to write the missing\n    code in the Main class to:\n</p>\n<ul>\n    <li>Output information for each cat instance to the console.</li>\n    <li>Modify the status of the cat named <strong>Ben</strong> to record that he is sleeping. </li>\n</ul>\n<div class=\"hint\">\n    Review how the default cat's information was output using System.out.println().\n</div>\n<div class=\"hint\">\n    Review how the panda cat status was set to sleeping.\n</div>\n\n<p>References:</p>\n<ul>\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-1-objects-intro-turtles.html\">2.1. Objects - Instances of Classes</a></li>\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/Unit2-Using-Objects/topic-2-2-constructors.html\">2.2. Creating and Initializing Objects: Constructors</a></li>\n</ul>\n\n<p>Check your modified Main class by clicking the <strong>'Check'</strong> button at the bottom of this page.</p>\n\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "output"
        },
        {
          "name" : "Implement Cat Class",
          "files" : {
            "src/Cat.java" : {
              "name" : "src/Cat.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Cat {\n    // Implement instance variables\n    private final String name;\n    private int age;\n    private final String color;\n    private boolean isSleeping;\n\n    public Cat() // Default constructor\n    {\n        this.name = \"\";\n        this.age = Integer.MIN_VALUE;\n        this.color = \"\";\n        this.isSleeping = false;\n    }\n\n    public Cat(String name, int age, String color) // Initializing constructor\n    {\n        // Assign input parameters values to corresponding instance variables\n        this.name = name;\n        this.age = age;\n        this.color = color;\n\n        // Set default instance variables\n        this.isSleeping = false;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Implement class methods\n    public void sleeps(){ isSleeping = true; }\n    public void wokeUp() { isSleeping = false;}\n    private String sleeping()\n    {\n        if (isSleeping) {\n            return \"is sleeping.\";\n        }\n        else {\n            return \"is not sleeping.\";\n        }\n    }\n\n    @Override\n    public String toString() {\n        return name + \", the \" + age + \"-year-old \" + color + \" cat, \" + sleeping();\n    }\n}"
            },
            "test/CatTests.java" : {
              "name" : "test/CatTests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\npublic class CatTests {\n  @Test\n  public void testSolution() {\n    // put your test here\n    Assert.fail(\"Tests not implemented for the task: Cat Class\");\n  }\n}"
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [
                {
                  "offset" : 686,
                  "length" : 77,
                  "possible_answer" : "System.out.println(cat.toString());",
                  "placeholder_text" : "/* TODO: Add the code to print each of my cats' objects on a separate line */"
                }
              ],
              "is_visible" : true,
              "text" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args)\n    {\n        Cat myCat = new Cat();\n        System.out.println();\n        System.out.println(\"A default Cat is:\");\n        System.out.println(myCat.toString());\n\n        List<Cat> myCats = new ArrayList<Cat>();\n        myCats.add(new Cat(\"Panda\", 16, \"Black and white\"));\n        myCats.add(new Cat(\"Rusty\", 15, \"Orange tabby\"));\n        myCats.add(new Cat(\"Ben\", 18, \"Black and white\"));\n        myCats.add(new Cat(\"Bowie\", 13, \"White\"));\n\n        System.out.println();\n        System.out.println(\"My cats are:\");\n        for(Object cat : myCats)\n        {\n            /* TODO: Add the code to print each of my cats' objects on a separate line */\n        }\n    }\n}\n"
            }
          },
          "description_text" : "<!DOCTYPE html>\n<html>\n<style>\ntable, th, td {\n  border:1px solid black;\n}\n</style>\n<body>\n\n<h1>Cat Class: Instance Variables & Methods</h1>\n<p>Implement the Cat class by adding <strong>instance variables</strong> (attributes) and <strong>methods</strong>\n    (behaviors).</p>\n\n<p>Implement the following instance variables (attributes):</p>\n<ul>\n    <li><strong>name</strong> as a string.</li>\n    <li><strong>age</strong> age as an int.</li>\n    <li><strong>color</strong> color as a string.</li>\n    <li><strong>playing</strong> playing as a boolean</li>\n</ul>\n\n<p>Implement the following methods (behaviors):</p>\n<ul>\n    <li><strong>Cat</strong> constructor without parameters:</li>\n    <ul><li>Set </li></ul>\n    <li><strong>Cat</strong> as a string.</li>\n    <li><strong>Cat</strong> as an int.</li>\n    <li><strong>Cat</strong> a a boolean</li>\n</ul>\n\n\n<li>You may need to refer your learners to a particular lesson,\ntask, or file. To achieve this, you can use the in-course links.\nSpecify the path using the <code>&lt;a href=\"course://lesson1/task1/file1\"&gt;\nlink_text&lt;/a&gt;</code> format.</li><br>\n\n<li>You can insert shortcuts in the task description.\nWhile <strong>task.html/task.md</strong> is open,\nright-click anywhere on the <strong>Editor</strong> tab\nand choose the <strong>Insert shortcut</strong> option\nfrom the context menu.\nFor example: &amp;shortcut:FileStructurePopup;.</li><br>\n\n<li>Insert the &percnt;<code>IDE_NAME</code>&percnt; macro,\nwhich will be replaced by the actual IDE name.\nFor example, <strong>%IDE_NAME%</strong>.</li><br>\n\n<li>Insert PSI elements, by using links like\n<code>&lt;a href=\"psi_element://link.to.element\"&gt;element description&lt;/a&gt;</code>.\nTo get such a link, right-click the class or method\nand select <strong>Copy Reference</strong>.\nThen press &amp;shortcut:EditorPaste;\nto insert the link where appropriate.\nFor example, a\n<a href=\"psi_element://java.lang.String#contains\">link to the \"contains\" method</a>.</li>\n</ul>\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\n    repositories {\n        mavenCentral()\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        println \"#educational_plugin_checker_version 1\"\n        def separator = System.lineSeparator()\n        def lines = output.toString().split(\"(?<=${separator})|(?=${separator})\")\n        for (line in lines) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: 'application'\n    apply plugin: 'java'\n\n    sourceCompatibility = 1.8\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        testImplementation group: 'junit', name: 'junit', version: '4.12'\n    }\n\n    sourceSets {\n        main {\n            java.srcDir 'src'\n        }\n        test {\n            java.srcDir 'test'\n        }\n    }\n\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n\n    if (project.hasProperty(\"educationalRun\") && \"true\".equalsIgnoreCase(project.getProperty(\"educationalRun\"))) {\n        def runOutput = new ByteArrayOutputStream()\n        tasks.run.setStandardOutput(runOutput)\n        tasks.run.doLast { printOutput(runOutput) }\n    }\n}\n\nproject(':util') {\n    dependencies {\n        implementation group: 'junit', name: 'junit', version: '4.12'\n    }\n}\n\nconfigure(subprojects.findAll { it.name != 'util' }) {\n    dependencies {\n        implementation project(':util').sourceSets.main.output\n        testImplementation project(':util').sourceSets.test.output\n    }\n}\n"
    }
  ],
  "version" : 11
}