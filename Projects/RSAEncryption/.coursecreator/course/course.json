{
  "course_version" : 1,
  "summary" : "This is an introductory RSA Encryption in Java course.\n- The course will be most beneficial for beginner-level Java learners.\n- The course covers core RSA Encryption features.\n- It contains hands-on examples of RSA Encryption code implementation and exercises to practice new skills.\n- The course is based on RSA information freely available on the Internet.",
  "title" : "RSA Encryption",
  "programming_language" : "JAVA",
  "language" : "en",
  "course_type" : "PyCharm",
  "vendor" : {
    "name" : "Rick Brunson, Team Brunson Software, LLC"
  },
  "items" : [
    {
      "title" : "RSA Basics",
      "task_list" : [
        {
          "name" : "Introduction",
          "files" : {
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [
                {
                  "offset" : 545,
                  "length" : 33,
                  "possible_answer" : "bzmngSV1N1YAy+vpmJmRu6sqB35zvBStTZAEKxfm3kc=",
                  "placeholder_text" : "/* TODO Enter a secret message */"
                },
                {
                  "offset" : 1136,
                  "length" : 24,
                  "possible_answer" : "vtVYveoVQukaYQwHUdch/2v5OzNu6B6l2hkMZyFKWbY=",
                  "placeholder_text" : "/* TODO Enter a reply */"
                }
              ],
              "is_visible" : true,
              "text" : "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"
            }
          },
          "description_text" : "<html>\n<body style=\"font-size:1em;\">\n<h2>RSA Encryption</h2>\n</p>\n\nRSA encryption allows coded messages to be sent without the sender (or any third-party)\nknowing how to decode the message. This encryption works using a public keys that is known to everyone\nand a private key that is known only by the receiver.\n\n<ul>Watch <a href=\"https://www.youtube.com/embed/sBO3gH1uGzQ?end=190\" target=\"_blank\">RSA encryption in 5 minutes</a></ul>\n\n</p><div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Public Key &lt;n, e&gt;: Encode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Select two distinct primes, <em>p</em> and <em>q</em>. We'll use primes from 127 to 200.</li>\n        <li>Multiply <em>p</em> and <em>q</em> to get <em>n</em>, the encryption modulus.\n            <ul><em>n = p * q</em> </ul></li>\n        <li>Select prime <em>e</em> that is less than n and relatively prime to <em>(p-1) * (q-1).</em>\n            <em>\n                <ul>φ(n) = (p-1) * (q-1)</ul>\n                <ul> 1 &lt; e &lt; φ (n)</ul>\n                <ul>gcd(e, d (n)) = 1 &emsp; i.e. φ (n) % e != 0</ul>\n            </em></li>\n        <li>Convert message String to ASCII values <em>bytes</em> from plain text <em>P</em>.\n            <ul><code>byte[] M = P.getBytes(StandardCharsets.UTF_8);</code></ul></li>\n        <li>Encrypt plain text <em>m</em> byte into cipher text <em>C</em> using public key &lt;n, e&gt;.\n            <em>\n                <ul> For each byte in M: m = byte</ul>\n                <ul> C ≡ m<sup>e</sup> mod n</ul>\n            </em></li>\n    </ol>\n\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Private Key&lt;n, d&gt;: Decode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Determine private key <em>d</em>.\n            <em>\n                <ul>(k*d) mod φ(n) ≡ 1</ul>\n                <ul>d = (k * φ(n) + 1)/e &emsp; [let k = 0, 1, 2, 3 ...]</ul>\n                <ul>&emsp; i.e. Find lowest k where (k * φ(n) + 1) mod e ≡ 0</ul>\n            </em></li>\n        <li>Decrypt cipher text <em>C</em> from into decoded byte text <em>m</em> using private key &lt;n, d&gt;.\n            <em>\n                <ul> For each byte in C: c = C</ul>\n                <ul> M ≡ c<sup>d</sup> mod n</ul>\n            </em></li>\n        <li>Convert decoded byte text from ASCII values <em>M</em> to plain text <em>P</em>.\n            <ul><code>String P = new String(M, StandardCharsets.UTF_8);</code></ul></li>\n\n    </ol>\n</div>\n\n<p>Enter the correct code in the placeholder boxes as instructed.</p>\n\nReferences:\n<ul style=\"font-size:0.9em;\">\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/index.html\">AP CS A Java Course</a></li>\n    <li><a href=\"https://www.javatpoint.com/rsa-encryption-algorithm\">javaTpoint: RSA Encryption Algorithm</a></li>\n    <li><a href=\"https://www.thejavaprogrammer.com/rsa-algorithm-in-java/\">The Java Programmer: RSA Algorithm in Java (Encryption and Decryption)</a></li>\n    <li><a href=\"https://www.asciitable.com/\">ASCII Table</a></li>\n    <li><a href=\"https://mkyong.com/java/how-to-convert-character-to-ascii-in-java/\">Mkyong.com: Java – Convert Character to ASCII</a></li>\n    <li><a href=\"https://www.youtube.com/embed/4zahvcJ9glg\" target=\"_blank\">The RSA Encryption Algorithm (1 of 2: Computing an Example)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/oOcTVTpUsPQ\" target=\"_blank\">The RSA Encryption Algorithm (2 of 2: Generating the Keys)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/sBO3gH1uGzQ?end=190\" target=\"_blank\">RSA encryption in 5 minutes</a></li>\n</ul>\n<p>Click <strong>'Check'</strong> verify your solution.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "name" : "Maths",
          "files" : {
            "src/Maths.java" : {
              "name" : "src/Maths.java",
              "placeholders" : [
                {
                  "offset" : 413,
                  "length" : 37,
                  "possible_answer" : "5e4ZeoS3AyakrqdEFRuvHMwm4irTVM5JRoBw3uW2smFsV+4sGkPLw34iG2dy21gb",
                  "placeholder_text" : "/* TODO Reject numbers less than 2 */"
                },
                {
                  "offset" : 705,
                  "length" : 261,
                  "possible_answer" : "qNpu7VyepW8j1L6JSMHK0MPAv6f0I7mWyJQ2eae2R28LU0bP02oAoOB2GE6Zi/T5pgErcSZ25RCY9igdb+AW+6uWin5DNLk7YoLcPOrF+UyH6p//B+JFmozKQn72GK4A2KbmtBxG4RI4BF7ZOsC18fmhE0BF2YpytckrbjFJ/xS7Gpaj6bqYIQiV3MbrdinH",
                  "placeholder_text" : "/* TODO Follow directions in comments:\nUse a loop to increment control variable from the lowest prime number to one half of n (inclusive).\nIf n is a multiple of the control variable, it cannot be prime so reject it.\nOtherwise, increment the control variable.\n*/"
                },
                {
                  "offset" : 968,
                  "length" : 34,
                  "possible_answer" : "Je5Vtpsspt8ZuohKF3sAuUe73qGG5/vFQ0b35UHr/ho=",
                  "placeholder_text" : "/* TODO Accept all other values */"
                },
                {
                  "offset" : 1456,
                  "length" : 213,
                  "possible_answer" : "qTawkAt4JdztRuaebXW8xgcFbw1ZJ8M7V1O0nrDCUzN1vo11s1V7eQhF2MAr1C9c4eVbuRXidLjoqoyORcj+N/AidZ9k1joZlLcI2gLah0bS545rSXYzNixKxljO+btGodSd8m6OtIaJSiV+T4xYDPiHoEKvlLlzShI3OEjCsXx1G3VaN4N+/KWuFjgLAH4IwSV2WUdRykMX0R/NtnewJbyAKkyW0YMGDnGjO18O5z5g0i1in6geolxyKFrhbhO7JUtSYqPys/oqKwQWbUMp3w==",
                  "placeholder_text" : "/* TODO Complete method implementation:\n  Use a loop to check all numbers between 'from' and 'to' inclusive.\n  If number is prime, add it to the primes list using primes.add(number)\n  return the list of primes;\n*/"
                },
                {
                  "offset" : 1831,
                  "length" : 27,
                  "possible_answer" : "SEFrU6X2cLVUzbJ8h5ZdxjgiyDpFNlXeSrvtwcJe65IAinC/NvcRK4DtBZvoUx6R",
                  "placeholder_text" : "/* TODO Implement method */"
                },
                {
                  "offset" : 2259,
                  "length" : 40,
                  "possible_answer" : "qAdCrLEfPFDJzq5RySA3Hw==",
                  "placeholder_text" : "/* TODO Reduce base by taking modulus */"
                },
                {
                  "offset" : 2576,
                  "length" : 10,
                  "possible_answer" : "lAX9hnco9m052Q6jzpLSnj0lGdXSXwZu6YqS1Q0Itdo=",
                  "placeholder_text" : "/* TODO */"
                },
                {
                  "offset" : 2613,
                  "length" : 10,
                  "possible_answer" : "d6Xj3ddBwrSD+cg1zJXmw3QY8Qwkd2e59+EXuYTL0/o=",
                  "placeholder_text" : "/* TODO */"
                },
                {
                  "offset" : 2679,
                  "length" : 10,
                  "possible_answer" : "S7T+xHZiXvrhSd9PIvT4ww==",
                  "placeholder_text" : "/* TODO */"
                },
                {
                  "offset" : 2733,
                  "length" : 10,
                  "possible_answer" : "HrsrRuI7bYGOV20HCpr+tIPIUA511Didv04mkgRp4r4=",
                  "placeholder_text" : "/* TODO */"
                },
                {
                  "offset" : 2794,
                  "length" : 10,
                  "possible_answer" : "tyivELM3CFSNCcgI7RJfDw==",
                  "placeholder_text" : "/* TODO */"
                }
              ],
              "is_visible" : true,
              "text" : "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"
            },
            "test/MathsTests.java" : {
              "name" : "test/MathsTests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "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"
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "wNTXQDY4vh9uLweVV/2QBf5+i2xoom41mRLONkN++0VC8m2JVX0jjvsRHWZiu4VvF2sGcAvSx9NB7OKPQkPBF/9To4+6fR5kUfDMjkJvTzlYLfkBWNKo+VALp5u08FxovqVPe/zDKtsNiYt5dPcon9TYfu9SnYud4inUk7AIE6ox7BrvG78MRgG7iMNlDjY+RMhAU6RgPU1ITYy2IGIKJK4fk01DnoAJYhCegDgcibmIOwamZN/0qmfmnKQsHnrltdOYOYMfVAjSbH5rVHLGG4TDriNxNUP3rMoprWwvjXqbvHU89qIc6UHQQg/lMTni8eiNFJJFMMkll2dXXoHczmiQnz1uToRJeacZby0uOHUp9pNJLQqL8/v5YrKHuF2oWrR7nG1cmPh2WVOmnx8RKSdKAzKgqokKHTjiGW+MjZVdHCl46hFQkzr4GdoFqsd/7lcy6e15G1gbqRcOJiNrrJX253Oz+JX4J0CezuHaptts8Nfw/Foj+PXnUTJcECvcinC+8TWrtMrZdEBwax0tw9GTkpJcvw7BPqWXrngI8y8uHsN4GJesQ6CpWQ+n8K38u+FD7IGYEZg1lk46AmV0N4OdzctA4CpFVdtodoH6BNEm+32TV+9v+3qo6bYkQwPdaVcORmYrFROuzmGoGNlTscC/d9p7z6l/MQ3fPVl8SfJpFHwddRlvC2RNPhJMYFxx9lUiAqqF1baEAdwXpBDlYRLpDCsM/ntOi3jBoVSpIYSe29Fx0VieXFTfgpr2NQmSZd4UwStTMmfCZxmW37gLu/5hRuOeDN4XKHa5B6/XOIyKYCqxmbEPEXGRNzPKwKXhnvwn2qsvE9wUN65ZaCa6hJrUwCIXOcYFi1jXBdhxUExIWnu/juLKnvQpb3wQLxnXKgVmybtV7+VDuPGXWaM3FlCbrmDLYI8TDJ83jIfstkE+ovdtlwFUVOYNzzmzoGHWVSj/bEgoQkZwzvkvhymQmiVJid+fJSPyOKCrEJWrU5SXPsH1FfiUceqXrvjFH/iVEUULpGSSe8M18iWApl1OKmDW5QKeT0Pu3vUez0j7Caavm9MoNRhd7RpKBg2mxCojiab4gHfv3gaRCoG4yKq/rwDFojz4GVOeDm8w01Dx/QPfPZamNYeaiIa49twJX9qEYhiepMdrVeQWu4wPnK+biO4tuhy4goFTQEn1S2f1hig="
            }
          },
          "description_text" : "<html>\n<body style=\"font-size:1em;\">\n<h2>RSA Encryption</h2>\n</p>\n\nRSA encryption allows coded messages to be sent without the sender (or any third-party)\nknowing how to decode the message. This encryption works using a public keys that is known to everyone\nand a private key that is known only by the receiver.\n\n</p><div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Public Key &lt;n, e&gt;: Encode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Select two distinct primes, <em>p</em> and <em>q</em>. We'll use primes from 127 to 200.</li>\n        <li>Multiply <em>p</em> and <em>q</em> to get <em>n</em>, the encryption modulus.\n            <ul><em>n = p * q</em> </ul></li>\n        <li>Select prime <em>e</em> that is less than n and relatively prime to <em>(p-1) * (q-1).</em>\n            <em>\n                <ul>φ(n) = (p-1) * (q-1)</ul>\n                <ul> 1 &lt; e &lt; φ (n)</ul>\n                <ul>gcd(e, d (n)) = 1 &emsp; i.e. φ (n) % e != 0</ul>\n            </em></li>\n        <li>Convert message String to ASCII values <em>bytes</em> from plain text <em>P</em>.\n            <ul><code>byte[] M = P.getBytes(StandardCharsets.UTF_8);</code></ul></li>\n        <li>Encrypt plain text <em>m</em> byte into cipher text <em>C</em> using public key &lt;n, e&gt;.\n            <em>\n                <ul> For each byte in M: m = byte</ul>\n                <ul> C ≡ m<sup>e</sup> mod n</ul>\n            </em></li>\n    </ol>\n\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Private Key&lt;n, d&gt;: Decode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Determine private key <em>d</em>.\n            <em>\n                <ul>(k*d) mod φ(n) ≡ 1</ul>\n                <ul>d = (k * φ(n) + 1)/e &emsp; [let k = 0, 1, 2, 3 ...]</ul>\n                <ul>&emsp; i.e. Find lowest k where (k * φ(n) + 1) mod e ≡ 0</ul>\n            </em></li>\n        <li>Decrypt cipher text <em>C</em> from into decoded byte text <em>m</em> using private key &lt;n, d&gt;.\n            <em>\n                <ul> For each byte in C: c = C</ul>\n                <ul> M ≡ c<sup>d</sup> mod n</ul>\n            </em></li>\n        <li>Convert decoded byte text from ASCII values <em>M</em> to plain text <em>P</em>.\n            <ul><code>String P = new String(M, StandardCharsets.UTF_8);</code></ul></li>\n\n    </ol>\n</div>\n\n<p>Enter the correct code in the placeholder boxes as instructed.</p>\n\n<div class=\"hint\">\n    See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/Maths.html\">RSA Maths API</a>\n</div>\n\nReferences:\n<ul style=\"font-size:0.9em;\">\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/Maths.html\">RSA Maths API</a></li>\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/index.html\">AP CS A Java Course</a></li>\n    <li><a href=\"https://www.javatpoint.com/rsa-encryption-algorithm\">javaTpoint: RSA Encryption Algorithm</a></li>\n    <li><a href=\"https://www.thejavaprogrammer.com/rsa-algorithm-in-java/\">The Java Programmer: RSA Algorithm in Java (Encryption and Decryption)</a></li>\n    <li><a href=\"https://www.asciitable.com/\">ASCII Table</a></li>\n    <li><a href=\"https://mkyong.com/java/how-to-convert-character-to-ascii-in-java/\">Mkyong.com: Java – Convert Character to ASCII</a></li>\n    <li><a href=\"https://www.youtube.com/embed/4zahvcJ9glg\" target=\"_blank\">The RSA Encryption Algorithm (1 of 2: Computing an Example)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/oOcTVTpUsPQ\" target=\"_blank\">The RSA Encryption Algorithm (2 of 2: Generating the Keys)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/sBO3gH1uGzQ?end=190\" target=\"_blank\">RSA encryption in 5 minutes</a></li>\n</ul>\n<p>Click <strong>'Check'</strong> verify your solution.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "task_type" : "edu"
        },
        {
          "name" : "Public Key",
          "files" : {
            "src/PublicKey.java" : {
              "name" : "src/PublicKey.java",
              "placeholders" : [
                {
                  "offset" : 183,
                  "length" : 54,
                  "possible_answer" : "IFLFnzSdN3tWlfitaTkGEt8Aww0XxrPrU+UGGdAErv/GPgtFj3ltBSy4Y+z2Up9vckbCS7dz+jemAG00upz2sDNbGc7kZLI93EZBGyNeaq/AATwVLib13o1Cqpg5DJDqpL2qyH76iyXovYOOTw0saThaY/ndwhwB0kWqOpMGXL9G29+ojrOE7eFpP4ZB45/5VVxXuVNbNrHvjohCvk/BRA==",
                  "placeholder_text" : "/* TODO Create class variables e, n, p, q and phi_n */"
                },
                {
                  "offset" : 368,
                  "length" : 45,
                  "possible_answer" : "qwjNQTczGZfD5wZlQ3F27KSPGe0PpwcUYLOkEGkoDUYpsTFy/OxkJej9Z8RZrRcZyiLHMSFvyTZGeiE0N3tHmjnpXjLhBADu4t2DKtO3yftwzgQkHxQT5q/1Mh5kbbWre9Wx2FGKAcV95PviAip/ZxpaGejA9HdSVMwPlMBhE8yasI/LoryMncZjs6rCtoHI",
                  "placeholder_text" : "/* TODO Get primes p and q from 127 to 200 */"
                },
                {
                  "offset" : 590,
                  "length" : 52,
                  "possible_answer" : "i3JN7LJkix7P6X3UfC/gT5TwnBGiTrf7e64qNvHfG+/vIWxRERl7Ta706kb6bTf8bfUH3ogtzAjZMCH0E4KdkgjPXFRl6i5RJbl6T0WmMPo=",
                  "placeholder_text" : "/* TODO Use getter methods to set class variables */"
                },
                {
                  "offset" : 796,
                  "length" : 30,
                  "possible_answer" : "OY/BFm3vcawhJqZV4hetSrBlCUPSjezwDEvUdEEIc1BNr0f01RUz3yqpwLqp8m5I",
                  "placeholder_text" : "/* TODO Set class variables */"
                },
                {
                  "offset" : 911,
                  "length" : 24,
                  "possible_answer" : "i3JN7LJkix7P6X3UfC/gT2n6gPLUgr3htOgjlX4xWIw=",
                  "placeholder_text" : "/* TODO Compute phi_n */"
                },
                {
                  "offset" : 962,
                  "length" : 20,
                  "possible_answer" : "9LexboKVPnLnptiXJek9puvA3z0GhtgOVQy6bD58y3PEelX/BYXZdJLoGKQB7sBD",
                  "placeholder_text" : "/* TODO Compute n */"
                },
                {
                  "offset" : 1085,
                  "length" : 65,
                  "possible_answer" : "yR9VgUC2VBDtJXRifz/Ix69ULw9dFi+6q2LcbDjPpVN42YMAEuwDlPL0hbkF8NI5vl8/T39FyYDB8CPsQUHqoQ==",
                  "placeholder_text" : "/* TODO Get random int named index between 0 and primes.size() */"
                },
                {
                  "offset" : 1226,
                  "length" : 37,
                  "possible_answer" : "K20usCWciQF5tn/sOJa5xe6aupKFZ84f7DI4IFZuja8=",
                  "placeholder_text" : "/* TODO Return random prime number */"
                },
                {
                  "offset" : 1333,
                  "length" : 34,
                  "possible_answer" : "7m6zC/32LokoyyK4qanBbfCQm+g4D5vvw7JeD3GO40U=",
                  "placeholder_text" : "/* TODO Get  primes up to phi_n */"
                },
                {
                  "offset" : 1369,
                  "length" : 56,
                  "possible_answer" : "EqAQKGK09Nirj1SqZYd/tzRrcZGtsuxKkTMImIA11bKM00882U7GQ+An2HpA9zaCiYh2R1uWtM4u2emwpkMv5Lq5ibXl/l9cx0jG+ZuvN1VUYsxpQmkuFwWzhpzg4jhQe+s0Fr4cBLoSC2MazRH2VD0SCgb5pjltgJhMm0FkBzUWyfAXX89og+AqXbNlZh1Tdm9nyw6LhJjTBM2Y6F/b5XS+uC733U0x3SEupMlMeSc=",
                  "placeholder_text" : "/* TODO Find e such that phi_n is not a multiple of e */"
                },
                {
                  "offset" : 1532,
                  "length" : 59,
                  "possible_answer" : "wvESuT9eYAofT5iuiYj5K91LCVCunu31JPW/CiJyPUlnmoQ40g6mU7hpkkdpVylu3ozRuN5k0f+NG9E/ZFVhCyqjcYlH+7imNnzW5p42ozdCfE7NGe7uowE1rn2sBzcsAI2o24dW7KbZPU/JixnaE/v16ad0sLB++qwjN+LX4w47UQ3T6watDqsv49ryxRc59zs1om1spNFvKZgx1ciYtyZwtR3UlNf9bO4F/IZRMCMsWu2MdWHkmfomvpJhcb6EaHWSZP/0XvWit9C7kOm0v4J69IzOfMvzcPu9D4SY+uylP+NLhwNMKzYaF5ZHJ6Vhd6L4I1xyWejozk5/2cSSBPH8S7s25eRq/olG4/E/9G4ytyCyfXx35rj4dzkwqR6Z7lQBdBFP7kfhCKn1+MQxZw==",
                  "placeholder_text" : "/* Optional Implement method to find e in a random order */"
                }
              ],
              "is_visible" : true,
              "text" : "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"
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "WD4jkOZnBTjY1rXuTkyBoiv1Z13tGQyxIMC6vFP7JVIOVj/iNQQiapFc/3ol2WXZ4lw/ABuG6ciGJMvN4zQ9jZ9kuqCH/m/2B0yTU5UJgk99sr1NvO/uSJQisJSrz1GMa7rd11PzS6/Eh+w8XlMC3vJCenzot/pX4pOXQgFH3hyJrpTy2FrX0Don9U9qeWtUhUYX2AlzkKa4TNVBPmTZK1ZHrvNTvQAVjmtvlJmLaon3l4N3IDCqpQEFAcmeqoWi9XD1xiVOlcF8f1YBYXvnCxIBSkiQN7cMvDWp3h8mIJM7OkjNhYl/BfTIhUOnD9KsygU0f7CqOpOuNcGOPgB9ANW3COHORlzPH4+PWVFd/jZ72ZFweHjMVR/RTVS9WPN81krQlZ6qh12EXbFLtNljC9hlIL+k7bK+254yRZiU0KuxDQl9vv215ZwsDdG5e91SadF+zarxmg5C/TMAOspBDMVVt3DOjve+oQ5tfT2iVsVZmL7CmItjNtGLyTNi9HxSoi8uis+DzRKLNRjlzpuqmKr3UlXom7PHBi5vCzaHgn7LxMtMBYBpxHX/XmbdvTkIGiyWdb71V8PwUi/CWsNBZI6yPyxcZebmK4HYbKr8zwLhfTiOQiSEBvVh+HDEb9W91UIVV3in7FQePUCaP0jbF2r98q0953xARcuNEWGculNGFX71JMpK5byCkLsyP9SSZDMjQIZdBGa9qvSL9Hi9x55WjpYlZmBrmHbpuN+6r3qVVNILqRGwsDtoJn7PSoQDc0HdLfiAiLVdvnB1xwopXfPKfOMU1On4QYqDI3iwYIaC+9bjya4L8bGwxavgX6DkZfN9hGBcnXFG70gxgUtoog=="
            },
            "src/Maths.java" : {
              "name" : "src/Maths.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "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"
            },
            "test/PublicKeyTests.java" : {
              "name" : "test/PublicKeyTests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "wNTXQDY4vh9uLweVV/2QBf5+i2xoom41mRLONkN++0VC8m2JVX0jjvsRHWZiu4VvF2sGcAvSx9NB7OKPQkPBF1dKnAxp63PS0wDOJeYXC4QQHxmPOKh1+I0+RHqVOdblFN7wDA3d+WoExHIaVEoZ6qfg4j+W44TkEj2iUwAvoaVeNcUo+cVUa9VmY18o3kDd6VkkKdLpngV0y48dfs9NdqtlzvaflW9TQXUTKkHZbZcYWWem9P+S/pWMBZAUT9sD75DMwQPFpbIIG1QHOXH0SZ0eYvxGAdOVIk55ZXjKR8sKOPMce8dvrH8ycXcXAJIxWZT4QthCAVSL51TfsiA0mDE5kNyvkEEaf/6uH/GtlJxJUs7XsGDseJkiCsxs2TApyeEvtf0YIEswZa4M8cdGboIcNfcWR2023udzCARyYUPuc5CeFA+pWRsxPT3OclWwJlzS7C0yp8nIQoF6z/ZBn2KlHHj7UmzQkRedrMN0pWJcnAVvI0RomIjV0SCLXmJHzlK8JEn9nEexr8IAUPpsj6atmIf/LBfNpK7nBR6lGh/StstUwXjJqG+nAH4+a4lQ+/BI9u+UnP2aYsBFz5R3mvdc3XvCgBgBC+jD9/JuL3lCS07yoF88mkbK5+7QHULY1wWqouKaIcStj1B7b2xJhSEGPDw5z7e49HAiBUQRKw0TZObwP2aJOB7S3Z5NMwA1f2eEHgaT3/z80UetbfcnjdgkTK+mqlp3RQ6h9rFcLBsNK1Qf5UbepYt7Wfy9l/w2KXTcptOGgEGmtY2ktXN7KqAF/rFRUFd6b0zrHTuA/pjPz01g0jX3xPx2FEhKEwHYnkuq/vtNskDtFGZVIx/poPb5M6KRallTPIb7NZ/ZRUlGkfK42qPJTIjnWG3SCCzbp8Ei9tq4OUrSDL+rF21xjGjTY/QlVLeSDj8KdgTDPunN+M85G0W2D6bLM8PfA6fS6QnWCEQbr/6ByeBvNyoQ6vNDUrVSrMBG9gYK5UpXNsBHJoMdG1eyle8tFw/cuoUiHOFqVAdyTL0pVPlc6Sxpp+nkmMAeFFdz+82KJ+/GAEBTyNyvq9RZk+XiAk2asKluvYvH3zC3nONfbOlpvuzPPCnMZ0PEV6UgV5eR4ctMcfVaBh0vHNwNLUZjthWPv9Dsd2CxryzAGxWUqSEz1nSLtBpR44j4ROShkNv/+r1fcymRlEMmwBGjsdAQA01CdqN8QjAZ97txcyUI1rCRj4hnfL44IfpeLnZH20zjXn+NrWk391Dv+skeFLSwW/mcVOj0FCGIjFa9/5dl8AB4X7zsDfA0+3mZPsfylaTT/Xm9NrLVTHi1WPgF4P01u8YquGSUXZz619aOm+FbVmqsxS42qUqBY/6lUB6eyRSlzQQak5TWpoAp8XhvefivGjdLbu6AJflERbH4iarNd6QFO6Dypj59nRC96K31/4wKaasOucx+WKwnbtYv0zPl07RqdA3ct2SNSU0yyvV2J1YCBKwE+JWNWiYfkC7Mjzjv9id6he8="
            }
          },
          "description_text" : "<html>\n<body style=\"font-size:1em;\">\n<h2>RSA Encryption</h2>\n</p>\n\nRSA encryption allows coded messages to be sent without the sender (or any third-party)\nknowing how to decode the message. This encryption works using a public keys that is known to everyone\nand a private key that is known only by the receiver.\n\n</p><div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Public Key &lt;n, e&gt;: Encode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Select two distinct primes, <em>p</em> and <em>q</em>. We'll use primes from 127 to 200.</li>\n        <li>Multiply <em>p</em> and <em>q</em> to get <em>n</em>, the encryption modulus.\n            <ul><em>n = p * q</em> </ul></li>\n        <li>Select prime <em>e</em> that is less than n and relatively prime to <em>(p-1) * (q-1).</em>\n            <em>\n                <ul>φ(n) = (p-1) * (q-1)</ul>\n                <ul> 1 &lt; e &lt; φ (n)</ul>\n                <ul>gcd(e, d (n)) = 1 &emsp; i.e. φ (n) % e != 0</ul>\n            </em></li>\n        <li>Convert message String to ASCII values <em>bytes</em> from plain text <em>P</em>.\n            <ul><code>byte[] M = P.getBytes(StandardCharsets.UTF_8);</code></ul></li>\n        <li>Encrypt plain text <em>m</em> byte into cipher text <em>C</em> using public key &lt;n, e&gt;.\n            <em>\n                <ul> For each byte in M: m = byte</ul>\n                <ul> C ≡ m<sup>e</sup> mod n</ul>\n            </em></li>\n    </ol>\n\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Private Key&lt;n, d&gt;: Decode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Determine private key <em>d</em>.\n            <em>\n                <ul>(k*d) mod φ(n) ≡ 1</ul>\n                <ul>d = (k * φ(n) + 1)/e &emsp; [let k = 0, 1, 2, 3 ...]</ul>\n                <ul>&emsp; i.e. Find lowest k where (k * φ(n) + 1) mod e ≡ 0</ul>\n            </em></li>\n        <li>Decrypt cipher text <em>C</em> from into decoded byte text <em>m</em> using private key &lt;n, d&gt;.\n            <em>\n                <ul> For each byte in C: c = C</ul>\n                <ul> M ≡ c<sup>d</sup> mod n</ul>\n            </em></li>\n        <li>Convert decoded byte text from ASCII values <em>M</em> to plain text <em>P</em>.\n            <ul><code>String P = new String(M, StandardCharsets.UTF_8);</code></ul></li>\n\n    </ol>\n</div>\n\n<p>Enter the correct code in the placeholder boxes as instructed.</p>\n\n<div class=\"hint\">\n    <ul>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/Maths.html\">RSA Maths API</a></li>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PublicKey.html\">RSA Public Key API</a></li>\n    </ul>\n</div>\n\nReferences:\n<ul style=\"font-size:0.9em;\">\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PublicKey.html\">RSA Public Key API</a></li>\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/Maths.html\">RSA Maths API</a></li>\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/index.html\">AP CS A Java Course</a></li>\n    <li><a href=\"https://www.javatpoint.com/rsa-encryption-algorithm\">javaTpoint: RSA Encryption Algorithm</a></li>\n    <li><a href=\"https://www.thejavaprogrammer.com/rsa-algorithm-in-java/\">The Java Programmer: RSA Algorithm in Java (Encryption and Decryption)</a></li>\n    <li><a href=\"https://www.asciitable.com/\">ASCII Table</a></li>\n    <li><a href=\"https://mkyong.com/java/how-to-convert-character-to-ascii-in-java/\">Mkyong.com: Java – Convert Character to ASCII</a></li>\n    <li><a href=\"https://www.youtube.com/embed/4zahvcJ9glg\" target=\"_blank\">The RSA Encryption Algorithm (1 of 2: Computing an Example)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/oOcTVTpUsPQ\" target=\"_blank\">The RSA Encryption Algorithm (2 of 2: Generating the Keys)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/sBO3gH1uGzQ?end=190\" target=\"_blank\">RSA encryption in 5 minutes</a></li>\n</ul>\n<p>Click <strong>'Check'</strong> verify your solution.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "task_type" : "edu"
        },
        {
          "name" : "Private Key",
          "files" : {
            "test/PrivateKeyTests.java" : {
              "name" : "test/PrivateKeyTests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "ITs8Nv8EH6QWJG5nufD7nL+5+4bhYoXDvmVthWtIgQ65QGrosPwl8pWa8Roz0DaOdCol9j8janFY/3CS78djEWHuUTdF6vZobj4JIyDSTUgEAn5vLEEFAulxUMQUKDF7LvfT67LnyaY9oiAJEDSkHRT2+tL0lI0mjWtjvWo3jm8MrmTHoH8ju0S6njgqpu2UPEWWAnoMDLV542hG6vjzkPoP0mGllrHSIWFx9705znvFY0n5dJvXp0hvsEa9QzLIrEjGG8JxwzSr7txB6oVlK2laJ3zMR9KaOylOfjsAo1FQqgKQEA420mMQROwRIX1SQyf1ZjL6566JJerU/hvUY+LxpPk2kaGUIrXqZ2zel+2W+uDb4VepnnduLqLFSsL/tDD1htcxBQLrnokKYocAQ2dl5Av7dciDmvdZfz2ZBlQ/R7n0cdc/WrywzC67Dcxn7rMJn5fAFoFCYYkUHCZk+vbcjrkiUyFzcpNXudLKXLpmzpHMIOdoEcI7O8AFf9AWOzNfUAjCORQ+V9XFqBOUp8yQABhtd7tVqK/mBZF1ytrCsRtWTAjIfDawfFcwmZQIJsqrdQQoGvTnx6bO6Y+PI8H8rD0Tabp1axlN7xMGWgyhJ1slXLaTKtKYElpBp2CeVvCkMZceno24TcJPKvNxHjwbGUOEnV+9Q/D/BE1XVSs="
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "wNTXQDY4vh9uLweVV/2QBf5+i2xoom41mRLONkN++0VC8m2JVX0jjvsRHWZiu4VvF2sGcAvSx9NB7OKPQkPBF/9To4+6fR5kUfDMjkJvTzk1Vek5BokNKtt9Atgy+s8+dUIBr2YrmsMrpnTZGm39w33quGAR51tQKIBrwiWJhcqe1RLmq8tF4a03sZ1mN7bxeNx/zCCUJ+kcHtOPojXiT+RSrQt7BHUx8OTSGJx6Kreuq9XSZgCmnCrW/1scVqGVBfWEwrieZCXneclGzZ0z7qCJ1cpINGudBUP/hsQhPi9XoI7puAaHAZv10NLesxGDSQZ9ozKbpg6cLYs+c5z5gp5b6B4SLZD9o9Mmv2Jw4RrI7qtcQJ/EqXPcWNBnHrb2ELN8NxsF8FddMZSpveVCbUgIrZRIeAVR7kT3rh7vEbw+TYR211KKTWc2zwtS7ugic2KkDkxIIRF5EcuPfi7L7fLtjwJp0E5/onRuZgP+e2E2bY7fYDM2InVdvBd279koJ1muPmVzNehtM7Ery1tW+wZskLn1Jy5ioEu/aT+OWP13EH6v+A7wNvfjC0GNzmMUDEDXPr5KKlRkk0mK1K+0p9RuSvqEuR+ICPe8YMkOgHGLzyBTDTuZU1j5WCTRiDiAE3DZzXoRLaZNwOBOe7yDaHKgdLGTeNYEWLsjzn5UC2kSuDLpuPZtKvxAiAlKtzh9KbH4DVxWIuKwsbY0R0/6US5CJWX+laXR+o84HV/Q5IltJ0hIrd7WSCCCZxme2vKV"
            },
            "src/Maths.java" : {
              "name" : "src/Maths.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "WD4jkOZnBTjY1rXuTkyBoiv1Z13tGQyxIMC6vFP7JVIOVj/iNQQiapFc/3ol2WXZ4lw/ABuG6ciGJMvN4zQ9jZ9kuqCH/m/2B0yTU5UJgk99sr1NvO/uSJQisJSrz1GMpcMUQx1aao+4XEp8xeKa4K4lDxDAE3UP3hp/Tz0fDvwlE7dCMyg6pq0HqUQAbxzqQA0488ooBzpfa6NTpjdoAjiFxBhigTemzRjcLWSmkLgdQMfvCFECRBFSqz7aL+mPAR+JSKK+wDQZGqRHQUzuwuTnOUDsaukyDsXb0rUQKewn5xh/LQTMjPJ8NsePOadfPSRZjXZKPyaOYSaCpZelUikTRGryJ9XPQfnIpWX1KWydOZd4j5ZIvrV5KnZxq3wNvXOENbjoi0E9L9iTUbMNvAi8Iw/doKvACkLFZX3eD5g2/0mAzZAEKxMoGC4TrawH5CvnOJI/Aa3KAB1DCOGAZkt4r8vv7qeE6W0PBew91Z7TGgAPbua1h1Tw7KB1vXoz3ep7VP4J6iChb/Au3KxVkx3NFirAqJZ5ZVgq6AsnA4uR7bI56u2F1t1Nqjx+H4IChZTNGCoFkDK5hEXzPHfbYggjQWkoqhY0SX5tykqGv6ndGqrLXMBmSjgC/nj/BvWqGRJ3CoOSTY+1BlN6gcso0LiLfB/u3EQsSPgzycoJ2ZY2RhzPZhMOzDkb2vfZLEiiNPSr935zSutk7u+QqbuQLrGuyEvZz2aQAhXSOk04uPQBzgbc6rRR0VDajwJc15FFsO10+/+sCqN4cduqtKqEuRldulytISAG/bV+BW3uM/y8+Y0++EUoKSmXwbcFqL4gg47Otw7IAp6R0FfEBh74rtAMUh3V0hZAwUTYFjuRqD8PBLeXtl7VU29de5AOHd5XDdZ6aEnpctM0ZK2uVwoEHi1673m9iLvq1NMx48L6iB+4sBJN65zg08WhI4AtexQeX80SNMVuakfNsT5JYUN+iI/RxctDCIagtehKMgehpcZbB+Jn3Xp7FsVh6800vsto2x8APAdSjv5fz+6p9XdvrSAmmTs6k4sX3lOtxd7YgMN9MxXDjh3+wqazSnU01yBbX0F1EZbrFIjEJImiySlBN3elVBXMMUdjba/myIO4eSffIPtXqAPgR4LY4yu93DAcO3B+f21U5r11lVYp6MRGkDYkayduhftc+M+aOJdCSXkLCiMoOSRNG8wjw6l+YOQKCTg0b3qr37a+3lFF6RfdWzKyBWy3weKyPiQIgLq8Igan44tIk5HsqhJ2FZqIXh8C2j6Dr+VmJS5EyB0deFuO8nqkbmfh3aarZ8c1hR+4bbthKu5hbyUAC/OLMJEfQy1UYwPkcQLiPekkB9j235oGN3n54kySwjFg80d0FuIde7ljG2AeX7VXbX8uajSIFlmYd31tKelen5VAXtStrpooq8DEdZdVrnmsKE64uFmpVIxzZ8E1JAayY13RxZL60ClNFZBN6vYAynp9NSpZWMelO1bpLMo5ds5b8ub0e7EaJM7iXgmtY2AEDIxoj9ArlngTFLniLwxd91zVDfuRfXgmo94i1P/tPauLCAC00ZyYyUJDFSKpz0HwIJk99WKy2Q7RftOcVwySaKIYzOUhPggfKXi7yvcCIS86Ruwyr1s+vRb1kj93Nr2R6gv9vFhrp5D1UPGuSh5MCbH16dq7E0gB8/bB9NsS2rIcys8O2/lxvKmiPzUBdR9dbKEY2m2oAo/z/dyMDl3aEKjfX/njjuVQKMW9wySO+7YFCtVUU8+ibc4mk0kZFd18mDx8dqWRkTCVk+wZ6quHiH6Ade3QfQGyV26xF1dBVTBFqUYaN+sWSUdF167P1RvZdynBn9mSneqIA4DMtdaKmMmueb40Gt2QLtSeMHu3kJsoswDpmxG/B+amnnIxqkMLCrjx++6OR1IynMGF7vl+pwo41u/gu8FzdQyH4aPf8/vHwSuY9LhU0PyDDVQPs0HvGa5NqSwaklu6pIq4KEIxLC20+FdqncSbB9Czb7rit/Qyeda/QfIdB3bkGh+8uUekINRsZ0dgZVKZAnRjILoqHwvQc7HnP0mAZuCZF+J7LPLC20pttxX8BfkexsU7ZLHTne8FKH1yvW1sPs/zx3YpfCHtwa5gvQOlpw0WVHxzm+vxYZpWVMZPXudqwThjWsN6CQIuGc31bXr4LYDNlPxEY3aOOG3I/jFT473+UEpzv6vN2n38vUD6okhHeJsIio8SACm7NhLeon45+I8sR0+2LeEc77q+6skw6smp/Kn7d7FC2ckxTZ6gZF7QIa8oi+hPjUqkvGroQU8IOItcLG6VJ17UFcvQcPJhBOdN0zy8LYNJtrTdyO3c2hjrD5BkV+mbF3bQpsU32dWjtgXkRb/2UXA7DUdlJa9ApdIjmflvDSawGP9Y47H/3DgRQUteuu0hYHajIIStTovsoVuTl/nH5vRGS8gjQgh+6GcFZZH/Zq9/J4YPpjeu3jVxq1oFk+rbBqAH67gGCxY4Vd0b3c95aS2R+Eqj3u/P4IS7JA0txFG3Q7FFvEr2ayvQbm6ix2gc8rTmxcpRdhpR2jQQGJEgtZaHS88d3mIm6+aN6js33/SwFleutU3KlJ2zaF3Av9LpGy//UPS5YKv27AwFfQv26MSf2C3qanODZEa7rcR+3Muaad7QSXPnwPSpkaXcq9ITZ5l1JXm5/eASoc5SbgunBlfUVOR33xqp8+RoBVedUd7hZtGnobiuYzpLA5dOmVFvP0pskRo2QnptDNqEMUwyY6c2QfaGrQCga9ljNo4hmB7gVTetiPiGZeCeVgW8SG9/4pF6gdfnYkfWNxlfqAxpWwElkvGg172Z3w2/KhJINUl8LKr9fLkADbe3pAXDc6rJHqXFDZMocojECtJl+6goeHl6iMPLeBXuza1pkoS3PnYvAjc6mUQ22rvHpckhPLHmr14G5bAceVRK9o5TN99orHMgq1lN2JiFiLeDlH0Yjxwgi1Wc3YywyJjn0dreuFIwh4mV8XMN8qZfmOyx5qu3E7WqStvNXSoSplhxncQB3UfFCvemUvimPRpNbmO5Ucb89KO3hBPA01o3A53z2GcEn5uATp6Av9nf2IhVjDKgQY3zONRlTFP/DeE7qFlvWWremRxl1nFQ/0acptXz2JlGoH55SN4nlFSjKKuYct9bWLH+DfYqe8a59hIXYNvIHtz/Btp3Pagi3qTp9cevtdVlsbh1EZTMyZMB1MaEl8MbuazdMpSbnVsy3QcQmEVROhIl11qKAp6AT90/9STmooGFrlo1wljNl0VgpHdxa7mHEaJ4H8yI2VgiX4URqWPrbJV9P4q6JTQkDb0fuQnTaEOnW6HI4Y8ZnfV5Vhnh2Du0vPOvuVewJQb4PPCbHn5XoERaswt4ccezlP3CxIvvxx38Bde2ENAMNY3BmPDQjxD3Ulc/mbyA/KJSz15bA5kMrcUoHjVz5ctVSPJNtc8DyY6aAd4mSQQsrjRb+eBpOkkQmgGl3tdyFNAnwWJXRaNRwgc3+LlzzcL7sY1LIY8tHZ5xa4PMsD40oIvQmVD8wSiMG/U2w/fufrlHdSmscMxX4hBK3L/RjDfrYaqktiI7hI6Y3LIrosao1ZudYQNIDsOLj0+81zb0iUbY1RBDGv5ruB4XtYRJlXlgkkm9ha0kGoodv9I5EwEimn8Z+UO7R/prAykFcWUOdxfW+wHvP2qhG4dETI8hLR0aLPwKZoqHj3869yOwBllrcL9n9/gwD5bvj7Ek+/9TpPnzHvZ+/DTBF08FDFBFHycJYoQYFmFR5cEJtibm9uA7YtEXoLnsku0dxUWKeqY0FiQuAQWSmfAb6frygvCu8ICHM6t2PyHkkPLL63OJOBSF7FuKE/i46oQUPJIvW7kfM2ocQZPrymyEK50TP2QXb2QeqHfwdq17c0Plw0Tof5WGs+q8InrYiMKPJETfhXyw45cXGXdJPvDancHr6/EtUUBBGLbRhwxDxJEGoSSGlJiL2aNFBtwu2AUpiYLH3TJPaOPlU7tSsfIwUsPX6YsWtCjvRGFESKiAJ+ji0dU1YgMM2Za74lDCvwNw6Cl6+m2F9bT7VAJAK7LDGpHu/tygj4Ed8ku7"
            },
            "src/PublicKey.java" : {
              "name" : "src/PublicKey.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "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"
            },
            "src/PrivateKey.java" : {
              "name" : "src/PrivateKey.java",
              "placeholders" : [
                {
                  "offset" : 161,
                  "length" : 46,
                  "possible_answer" : "IFLFnzSdN3tWlfitaTkGEu53+U651pPTu0UqYlXC3IbHh/e2L4S9EClMC5iyy2aI",
                  "placeholder_text" : "/* TODO  Implement required class variables */"
                },
                {
                  "offset" : 406,
                  "length" : 42,
                  "possible_answer" : "i3JN7LJkix7P6X3UfC/gT45kc5FASIlV+Qp636zbwkM=",
                  "placeholder_text" : "/* TODO Initialize known class variable */"
                },
                {
                  "offset" : 506,
                  "length" : 55,
                  "possible_answer" : "dWj1qcI9WA74za/S8WV53jwjT/sfnyb732IjBcsB7X5DsP30ZggiFBgnwf95NBgUu0MDFIu1c+ikXUF/n+DBokFn6AlozzZ8Hr2YvPO/5OLjk9tCMjtUTmE16a47cDvw+Eew9MtJfTXiu0kU8n1HRbu/hvEe3b5PAOzlVUvbPLvk2DTp8XDQAjXMXRVYAmFu3/ILqhesCJWehA3HfaD8GtmFdJxmFodmFD87UTETL+GJkHV8wTUUzrErmb4mm+WeT3OSuBStg5/QMOX+Zlmg0MP6P0oFV7eZ75aPQ1Ya2Fo=",
                  "placeholder_text" : "/* TODO Find lowest k where (k * φ(n) + 1) mod e ≡ 0 */"
                },
                {
                  "offset" : 584,
                  "length" : 27,
                  "possible_answer" : "3kc7i5q2FyqgV3lWJYBbV2GPhi7R/g+dDKEvUQpPFMY=",
                  "placeholder_text" : "/* TODO Compute/assign d */"
                }
              ],
              "is_visible" : true,
              "text" : "WD4jkOZnBTjY1rXuTkyBoiv1Z13tGQyxIMC6vFP7JVIOVj/iNQQiapFc/3ol2WXZ4lw/ABuG6ciGJMvN4zQ9jZ9kuqCH/m/2B0yTU5UJgk99sr1NvO/uSJQisJSrz1GM33rvGlHPzKQTOs2nR5Ew83N81uD4kf8cZjrc0n84rAcy5gn7+nA2TvfpKy29F8EZNLYpvkHLUyOE9dOoUdOZXDBY3TKD6eMiRAAIYy0aIEDHuHLZ68QZB5fVwcPb3xIqE8Xz/Ez/G0fAYPcnVuqWCUuRyatZVOnqbJzGF5XSOdAhwnTeMXIUJHgUj3MPj9IwaDRO0L/ZksPWK2ImKpOjQbvk9E62/39Bk4OgSQ9HP4AEW5g7kRR491d8MbVMMbcikQDgPTrmmV+qUjvyJKFsCS90mvRvDVc5ROleu6vREgy0yEtXLkD88xYQO//KJ1sOzoqzAXnrJGlhum76ielYOx8SK9ZC91kxYlLFf7iI1Wobv5SrhDMNLcm2QWhmmWas5Gw9qLN9OV6NSarSOTWMjatlGWhcqyOPDVI3RiYqJevZ9dDfgO747+P55L5jr1SUXttDVX/fraokjHgh9ErCxwE04pTUOKywY5KQurwoW80iLa58mFQAbXzuTPzCo2ahx84z/+11547YNSKHx+ApNEEwZF4mLSQqjTZraxHt4hsH0bn3lTakm2mR0z/SRDCNbqJ3kPGw8ILA7YV3XjoHlm5jV9BGzCgM/tInY439DyByoqrWXxl1qNKhUrbYCN6C86Ks7j8AEV87yZ5lulSI7MwJcoYFY8c7SOKXjcIWwoMQdYGf6wWS/pZMK0kKnYNrocJFQtyiu0G8Cfy2lNpzeXAXnNAHWWF+bProYJTcTJr6KXPB8o2NNQRvBfylYEPAv4fAAtDx35yG5Clf8hoFQW6rFmSr1CXjIWIwRAnYQntdV7LviuHGdhiAWJcWOmKTWxEp238eEZxxekNJ1QMaSOfSN7bdEvBQJCFdwr5e39peTZNSdlP2w2195sYCK7EKCREgVj9Gp+FrGk5Ne/YEr14aot0Thqh0YvU/EIJeAZ6KQMOfllovS2UbuY1ivGWNXIt39P/ZZ72XdctuZFQRdQ7WgBmIJ+wFHAsPG1EJW/qFPoBW2ExyCZz0qRP3UDnV"
            }
          },
          "description_text" : "<html>\n<body style=\"font-size:1em;\">\n<h2>RSA Encryption</h2>\n</p>\n\nRSA encryption allows coded messages to be sent without the sender (or any third-party)\nknowing how to decode the message. This encryption works using a public keys that is known to everyone\nand a private key that is known only by the receiver.\n\n</p><div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Public Key &lt;n, e&gt;: Encode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Select two distinct primes, <em>p</em> and <em>q</em>. We'll use primes from 127 to 200.</li>\n        <li>Multiply <em>p</em> and <em>q</em> to get <em>n</em>, the encryption modulus.\n            <ul><em>n = p * q</em> </ul></li>\n        <li>Select prime <em>e</em> that is less than n and relatively prime to <em>(p-1) * (q-1).</em>\n            <em>\n                <ul>φ(n) = (p-1) * (q-1)</ul>\n                <ul> 1 &lt; e &lt; φ (n)</ul>\n                <ul>gcd(e, d (n)) = 1 &emsp; i.e. φ (n) % e != 0</ul>\n            </em></li>\n        <li>Convert message String to ASCII values <em>bytes</em> from plain text <em>P</em>.\n            <ul><code>byte[] M = P.getBytes(StandardCharsets.UTF_8);</code></ul></li>\n        <li>Encrypt plain text <em>m</em> byte into cipher text <em>C</em> using public key &lt;n, e&gt;.\n            <em>\n                <ul> For each byte in M: m = byte</ul>\n                <ul> C ≡ m<sup>e</sup> mod n</ul>\n            </em></li>\n    </ol>\n\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Private Key&lt;n, d&gt;: Decode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Determine private key <em>d</em>.\n            <em>\n                <ul>(k*d) mod φ(n) ≡ 1</ul>\n                <ul>d = (k * φ(n) + 1)/e &emsp; [let k = 0, 1, 2, 3 ...]</ul>\n                <ul>&emsp; i.e. Find lowest k where (k * φ(n) + 1) mod e ≡ 0</ul>\n            </em></li>\n        <li>Decrypt cipher text <em>C</em> from into decoded byte text <em>m</em> using private key &lt;n, d&gt;.\n            <em>\n                <ul> For each byte in C: c = C</ul>\n                <ul> M ≡ c<sup>d</sup> mod n</ul>\n            </em></li>\n        <li>Convert decoded byte text from ASCII values <em>M</em> to plain text <em>P</em>.\n            <ul><code>String P = new String(M, StandardCharsets.UTF_8);</code></ul></li>\n\n    </ol>\n</div>\n\n<p>Enter the correct code in the placeholder boxes as instructed.</p>\n\n<div class=\"hint\">\n    <ul>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/Maths.html\">RSA Maths API</a></li>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PublicKey.html\">RSA Public Key API</a></li>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PrivateKey.html\">RSA Private Key API</a></li>\n    </ul>\n</div>\n\nReferences:\n<ul style=\"font-size:0.9em;\">\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PrivateKey.html\">RSA Private Key API</a></li>\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PublicKey.html\">RSA Public Key API</a></li>\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/Maths.html\">RSA Maths API</a></li>\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/index.html\">AP CS A Java Course</a></li>\n    <li><a href=\"https://www.javatpoint.com/rsa-encryption-algorithm\">javaTpoint: RSA Encryption Algorithm</a></li>\n    <li><a href=\"https://www.thejavaprogrammer.com/rsa-algorithm-in-java/\">The Java Programmer: RSA Algorithm in Java (Encryption and Decryption)</a></li>\n    <li><a href=\"https://www.asciitable.com/\">ASCII Table</a></li>\n    <li><a href=\"https://mkyong.com/java/how-to-convert-character-to-ascii-in-java/\">Mkyong.com: Java – Convert Character to ASCII</a></li>\n    <li><a href=\"https://www.youtube.com/embed/4zahvcJ9glg\" target=\"_blank\">The RSA Encryption Algorithm (1 of 2: Computing an Example)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/oOcTVTpUsPQ\" target=\"_blank\">The RSA Encryption Algorithm (2 of 2: Generating the Keys)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/sBO3gH1uGzQ?end=190\" target=\"_blank\">RSA encryption in 5 minutes</a></li>\n</ul>\n<p>Click <strong>'Check'</strong> verify your solution.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "task_type" : "edu"
        },
        {
          "name" : "RSA Encryption",
          "files" : {
            "test/RSATests.java" : {
              "name" : "test/RSATests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "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"
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "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"
            },
            "src/Maths.java" : {
              "name" : "src/Maths.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "WD4jkOZnBTjY1rXuTkyBoiv1Z13tGQyxIMC6vFP7JVIOVj/iNQQiapFc/3ol2WXZ4lw/ABuG6ciGJMvN4zQ9jZ9kuqCH/m/2B0yTU5UJgk99sr1NvO/uSJQisJSrz1GMpcMUQx1aao+4XEp8xeKa4K4lDxDAE3UP3hp/Tz0fDvwlE7dCMyg6pq0HqUQAbxzqQA0488ooBzpfa6NTpjdoAjiFxBhigTemzRjcLWSmkLgdQMfvCFECRBFSqz7aL+mPAR+JSKK+wDQZGqRHQUzuwuTnOUDsaukyDsXb0rUQKewn5xh/LQTMjPJ8NsePOadfPSRZjXZKPyaOYSaCpZelUikTRGryJ9XPQfnIpWX1KWydOZd4j5ZIvrV5KnZxq3wNvXOENbjoi0E9L9iTUbMNvAi8Iw/doKvACkLFZX3eD5g2/0mAzZAEKxMoGC4TrawH5CvnOJI/Aa3KAB1DCOGAZkt4r8vv7qeE6W0PBew91Z7TGgAPbua1h1Tw7KB1vXoz3ep7VP4J6iChb/Au3KxVkx3NFirAqJZ5ZVgq6AsnA4uR7bI56u2F1t1Nqjx+H4IChZTNGCoFkDK5hEXzPHfbYggjQWkoqhY0SX5tykqGv6ndGqrLXMBmSjgC/nj/BvWqGRJ3CoOSTY+1BlN6gcso0LiLfB/u3EQsSPgzycoJ2ZY2RhzPZhMOzDkb2vfZLEiiNPSr935zSutk7u+QqbuQLrGuyEvZz2aQAhXSOk04uPQBzgbc6rRR0VDajwJc15FFsO10+/+sCqN4cduqtKqEuRldulytISAG/bV+BW3uM/y8+Y0++EUoKSmXwbcFqL4gg47Otw7IAp6R0FfEBh74rtAMUh3V0hZAwUTYFjuRqD8PBLeXtl7VU29de5AOHd5XDdZ6aEnpctM0ZK2uVwoEHi1673m9iLvq1NMx48L6iB+4sBJN65zg08WhI4AtexQeX80SNMVuakfNsT5JYUN+iI/RxctDCIagtehKMgehpcZbB+Jn3Xp7FsVh6800vsto2x8APAdSjv5fz+6p9XdvrSAmmTs6k4sX3lOtxd7YgMN9MxXDjh3+wqazSnU01yBbX0F1EZbrFIjEJImiySlBN3elVBXMMUdjba/myIO4eSffIPtXqAPgR4LY4yu93DAcO3B+f21U5r11lVYp6MRGkDYkayduhftc+M+aOJdCSXkLCiMoOSRNG8wjw6l+YOQKCTg0b3qr37a+3lFF6RfdWzKyBWy3weKyPiQIgLq8Igan44tIk5HsqhJ2FZqIXh8C2j6Dr+VmJS5EyB0deFuO8nqkbmfh3aarZ8c1hR+4bbthKu5hbyUAC/OLMJEfQy1UYwPkcQLiPekkB9j235oGN3n54kySwjFg80d0FuIde7ljG2AeX7VXbX8uajSIFlmYd31tKelen5VAXtStrpooq8DEdZdVrnmsKE64uFmpVIxzZ8E1JAayY13RxZL60ClNFZBN6vYAynp9NSpZWMelO1bpLMo5ds5b8ub0e7EaJM7iXgmtY2AEDIxoj9ArlngTFLniLwxd91zVDfuRfXgmo94i1P/tPauLCAC00ZyYyUJDFSKpz0HwIJk99WKy2Q7RftOcVwySaKIYzOUhPggfKXi7yvcCIS86Ruwyr1s+vRb1kj93Nr2R6gv9vFhrp5D1UPGuSh5MCbH16dq7E0gB8/bB9NsS2rIcys8O2/lxvKmiPzUBdR9dbKEY2m2oAo/z/dyMDl3aEKjfX/njjuVQKMW9wySO+7YFCtVUU8+ibc4mk0kZFd18mDx8dqWRkTCVk+wZ6quHiH6Ade3QfQGyV26xF1dBVTBFqUYaN+sWSUdF167P1RvZdynBn9mSneqIA4DMtdaKmMmueb40Gt2QLtSeMHu3kJsoswDpmxG/B+amnnIxqkMLCrjx++6OR1IynMGF7vl+pwo41u/gu8FzdQyH4aPf8/vHwSuY9LhU0PyDDVQPs0HvGa5NqSwaklu6pIq4KEIxLC20+FdqncSbB9Czb7rit/Qyeda/QfIdB3bkGh+8uUekINRsZ0dgZVKZAnRjILoqHwvQc7HnP0mAZuCZF+J7LPLC20pttxX8BfkexsU7ZLHTne8FKH1yvW1sPs/zx3YpfCHtwa5gvQOlpw0WVHxzm+vxYZpWVMZPXudqwThjWsN6CQIuGc31bXr4LYDNlPxEY3aOOG3I/jFT473+UEpzv6vN2n38vUD6okhHeJsIio8SACm7NhLeon45+I8sR0+2LeEc77q+6skw6smp/Kn7d7FC2ckxTZ6gZF7QIa8oi+hPjUqkvGroQU8IOItcLG6VJ17UFcvQcPJhBOdN0zy8LYNJtrTdyO3c2hjrD5BkV+mbF3bQpsU32dWjtgXkRb/2UXA7DUdlJa9ApdIjmflvDSawGP9Y47H/3DgRQUteuu0hYHajIIStTovsoVuTl/nH5vRGS8gjQgh+6GcFZZH/Zq9/J4YPpjeu3jVxq1oFk+rbBqAH67gGCxY4Vd0b3c95aS2R+Eqj3u/P4IS7JA0txFG3Q7FFvEr2ayvQbm6ix2gc8rTmxcpRdhpR2jQQGJEgtZaHS88d3mIm6+aN6js33/SwFleutU3KlJ2zaF3Av9LpGy//UPS5YKv27AwFfQv26MSf2C3qanODZEa7rcR+3Muaad7QSXPnwPSpkaXcq9ITZ5l1JXm5/eASoc5SbgunBlfUVOR33xqp8+RoBVedUd7hZtGnobiuYzpLA5dOmVFvP0pskRo2QnptDNqEMUwyY6c2QfaGrQCga9ljNo4hmB7gVTetiPiGZeCeVgW8SG9/4pF6gdfnYkfWNxlfqAxpWwElkvGg172Z3w2/KhJINUl8LKr9fLkADbe3pAXDc6rJHqXFDZMocojECtJl+6goeHl6iMPLeBXuza1pkoS3PnYvAjc6mUQ22rvHpckhPLHmr14G5bAceVRK9o5TN99orHMgq1lN2JiFiLeDlH0Yjxwgi1Wc3YywyJjn0dreuFIwh4mV8XMN8qZfmOyx5qu3E7WqStvNXSoSplhxncQB3UfFCvemUvimPRpNbmO5Ucb89KO3hBPA01o3A53z2GcEn5uATp6Av9nf2IhVjDKgQY3zONRlTFP/DeE7qFlvWWremRxl1nFQ/0acptXz2JlGoH55SN4nlFSjKKuYct9bWLH+DfYqe8a59hIXYNvIHtz/Btp3Pagi3qTp9cevtdVlsbh1EZTMyZMB1MaEl8MbuazdMpSbnVsy3QcQmEVROhIl11qKAp6AT90/9STmooGFrlo1wljNl0VgpHdxa7mHEaJ4H8yI2VgiX4URqWPrbJV9P4q6JTQkDb0fuQnTaEOnW6HI4Y8ZnfV5Vhnh2Du0vPOvuVewJQb4PPCbHn5XoERaswt4ccezlP3CxIvvxx38Bde2ENAMNY3BmPDQjxD3Ulc/mbyA/KJSz15bA5kMrcUoHjVz5ctVSPJNtc8DyY6aAd4mSQQsrjRb+eBpOkkQmgGl3tdyFNAnwWJXRaNRwgc3+LlzzcL7sY1LIY8tHZ5xa4PMsD40oIvQmVD8wSiMG/U2w/fufrlHdSmscMxX4hBK3L/RjDfrYaqktiI7hI6Y3LIrosao1ZudYQNIDsOLj0+81zb0iUbY1RBDGv5ruB4XtYRJlXlgkkm9ha0kGoodv9I5EwEimn8Z+UO7R/prAykFcWUOdxfW+wHvP2qhG4dETI8hLR0aLPwKZoqHj3869yOwBllrcL9n9/gwD5bvj7Ek+/9TpPnzHvZ+/DTBF08FDFBFHycJYoQYFmFR5cEJtibm9uA7YtEXoLnsku0dxUWKeqY0FiQuAQWSmfAb6frygvCu8ICHM6t2PyHkkPLL63OJOBSF7FuKE/i46oQUPJIvW7kfM2ocQZPrymyEK50TP2QXb2QeqHfwdq17c0Plw0Tof5WGs+q8InrYiMKPJETfhXyw45cXGXdJPvDancHr6/EtUUBBGLbRhwxDxJEGoSSGlJiL2aNFBtwu2AUpiYLH3TJPaOPlU7tSsfIwUsPX6YsWtCjvRGFESKiAJ+ji0dU1YgMM2Za74lDCvwNw6Cl6+m2F9bT7VAJAK7LDGpHu/tygj4Ed8ku7"
            },
            "src/PublicKey.java" : {
              "name" : "src/PublicKey.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "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"
            },
            "src/PrivateKey.java" : {
              "name" : "src/PrivateKey.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "WD4jkOZnBTjY1rXuTkyBoiv1Z13tGQyxIMC6vFP7JVIOVj/iNQQiapFc/3ol2WXZ4lw/ABuG6ciGJMvN4zQ9jZ9kuqCH/m/2B0yTU5UJgk99sr1NvO/uSJQisJSrz1GM33rvGlHPzKQTOs2nR5Ew83N81uD4kf8cZjrc0n84rAcy5gn7+nA2TvfpKy29F8EZNLYpvkHLUyOE9dOoUdOZXLyypk3K6TKrXA9zd1EXA6Yj2dwQnyNLVDiuZPkEaZWjhGN6Cz37Pya9kr+aDMzjWjkkXfQeV0mPt7KovCuSPfiCvhFeieVw8E15KGuXWDuMORD0lAHMkwY8Bi3uUMPBmBE9svK4qt+zD/gz3zkMXdjOqBGHt0ACLi5btC7XXLCQmcTUbHaKE0bLI2RfDFWcx9O5gFi62nhkTvEzTNlht3rPpbsx2albjWTAkyAW/oyrCaZW1zt99Rpo0qeXadkadRcq2Zycd07kembDW9w/V6qTskXYAtBSVh7nU3YYlW5SB/mo5OZeKagpmtcCabNBlaRjn5N8I4DlRMDUpsCEHOH2cVhn3s+zW6jgKy8o5PnVORiGVisb5vMvHmtV9f2glzpDKDsGhT8NlNacCzvlHLYb6hZqaxHFlfuZyTEYtTqfX3q+ESNIB3ayjXLQNoVPU0Sm266DrdQtOkRFzUCEuLg049n7/AZfXok1pgKblVp8MlELyyRVxjc50bWRPH1BZQowxSvwBBXsPNm+8qFPmO3dlcqrWDycBYbDfwKvFQMpTXmwASwO99bzbq4xhp2PaND6lTxz8k9yV2jf/jT+tSlgVuOxV7gockSxqcXSo6YGnpTQDpXb/rKaBFbZ2tU48Xjk7Uxsjh2G3RRi254hrLiIB6jolTh+xsi5iSqqQMCxiA9CXkP57UEeis6BLB3pLTqnaX7/7nnKKMox18b9GUGIs1v+bNopd+WeiXfvv0kqb6gANXWNtf6TVA9L7ad5RbY/tXAL33p/0SFhMgto+RY502dcMGLpNiUbT6brGbm8nqCsOy3X/Ik3a7H82cX71qMykyYnQ8Zx8Z/uxw1n6aCIS6Ol7iwlQWfmIJL+KxiKshv6ZyaIWOk86ffjHwHUC+PKsuUdhEMfPGzMNuTcpcoOdIi6J9DCFF6lOA1ozRzNBO0KSaKVDXanynxmfbockGrfYhwzc8+swVIt0B1ounlYU146N1EzGkdqUkXS3j9Wo3cDaaXxqPq32L4atgfoEGJwbYITty3KBVxOmG0Ujvq13UKnsUSLbvNiOaV0aJYcMmMUfVWcQql+5DR7xZRjrQ=="
            },
            "src/RSA.java" : {
              "name" : "src/RSA.java",
              "placeholders" : [
                {
                  "offset" : 189,
                  "length" : 82,
                  "possible_answer" : "IFLFnzSdN3tWlfitaTkGEu53+U651pPTu0UqYlXC3IZUSA+qtWhwtPshNFgXtXaH3kvcdOD2f1c8IJJ7hyEcIQ==",
                  "placeholder_text" : "/* TODO Implement class variables for RSA encryption key components n, e and d  */"
                },
                {
                  "offset" : 446,
                  "length" : 91,
                  "possible_answer" : "udD60M1gYTVnuV0JGlvKhSHvpXFT+pvupXXZJ26S2KdwyR0eczROnOQ/87sYtyyoTyt5Hl2IQm46IwvUibF7AORIn8DbSIJ73JOknvemub3fjU6Zl+xyrWaPkO8eolVbmUrf9+M7cU1BOtZ49BoKEI63po+ob0z0IjvJ0sWMTDo8z3nhJGqtS40ElDBQhCZyjpUFMa1TDq4sShU0vGehp/Q25+3Yovrn5dmGiNpuUKHxACKlZYxihCC2YnukkFmjc4qLBGg6QAOPJ6jEwhhN7Z1JY0FlhxD+zjOCQajs+bjt27w4YyjfklOc8rSo+OiXIzaRlFle7pfbDHaFlD7Gww==",
                  "placeholder_text" : "/* TODO Get and Initialize public/private key components from associated class instances */"
                },
                {
                  "offset" : 673,
                  "length" : 37,
                  "possible_answer" : "udD60M1gYTVnuV0JGlvKhT0+nuc0pfUVjWLT/fT3mzutVKelf8bXzSbQ851p47n9r79iVlxwBzwew9TMRW53SnftQBDsApQvRJKoC1Wbu1P2EkEWgRWgE+o8/lpRlBZPyTdwuSG7S6WwgCj4Idclhywjsk+4MpIZYNEQ15X1Gjc=",
                  "placeholder_text" : "/* TODO Initialize class variables */"
                },
                {
                  "offset" : 873,
                  "length" : 37,
                  "possible_answer" : "i3JN7LJkix7P6X3UfC/gT3fiLZq5oAk90FCBoZGDCM0GO7a0MYFfMeBLY5U0SGyel/PQpmW2csSHZ8oxcn+03A==",
                  "placeholder_text" : "/* TODO Initialize class variables */"
                },
                {
                  "offset" : 1044,
                  "length" : 63,
                  "possible_answer" : "udD60M1gYTVnuV0JGlvKhSHvpXFT+pvupXXZJ26S2KcmEjCugAGJTXlM7pupnOM//16eADOElf86ThkO5howrHFcwY8k8uM5KDz2JzY6/RuQL49bxxAX2mooaA8QFeJI0KJ+4DMyKCIRpmu7DiQTKkhbiWdCVMdgJ8/Cw26JFAURMLT3SaYD9X/7fHr+Vqi9i7ahCeOHKLm62BFs4gW1qr4+QhZQgDrAz47wd4jTPmtq+4bWzWXTEtHOG7/TMaXAcHluUW9n93KvM++5YXTtaQYSb1OvRtWNx6GLpAu/VLXxfJ4+lLLwwvuBbricB9uYu4aLvwfddJqwnY1opGOtxA==",
                  "placeholder_text" : "/* Optional Implement constructor to initialize  n, e, and d */"
                },
                {
                  "offset" : 1164,
                  "length" : 59,
                  "possible_answer" : "BOKiod6KEdZyCmqgtVyn4RSbenhAOLlG3rUjFayZtHyqhiyulvrQhNmFP/tiUziavLFfAX/UeCaOLWJXIKEXNcSjL+0VU1cxLZXmD8bQQHju76Ijf5CXS+gEtjYSy2WbVlx62xW8nfPL+bLwnxrx77BcuuACYUKphUNxcx/5KMOjeH5Vgmo7EhQnWCsRKuLL",
                  "placeholder_text" : "/* TODO Implement method (don't give away your secrets!) */"
                },
                {
                  "offset" : 1833,
                  "length" : 65,
                  "possible_answer" : "EqAQKGK09Nirj1SqZYd/tzj6PX9URbFl8QIM14j9/jqpBUkaV4NP89fue34hV3QLn2FFejFUnG8cPI01KZqLpKrpdikAlc3OfC4K2JDdHrMMxivLN7XF14CKULHclVP/gcyJXjmSF7xs/m1nFyEUHALBhw71l/RKYkLGtpnn6GP+Z6J+sUyfv8CRh8bayAK52+P01IJwP/pwSrXfjEIVqw==",
                  "placeholder_text" : "/* TODO Put each encoded value from M into C at the same index */"
                },
                {
                  "offset" : 2528,
                  "length" : 64,
                  "possible_answer" : "ArY9Rayw+IzcW+SkqOoYQ42/BaS3QQM2OiQLByWYIZ72g+bovkjO9BAiq+y0KG542CJBW52XAnev3qhqdNJug/atkBSs5WWTMl3gGP6cnmA=",
                  "placeholder_text" : "/* Optional If cLength is odd, increment by 1 to make it even */"
                },
                {
                  "offset" : 2629,
                  "length" : 115,
                  "possible_answer" : "EqAQKGK09Nirj1SqZYd/t7XUsV5JBzE8AnIbAaaiuAn379jpyWp83FG/VzhVGQfWgBk7NkRVRNMC035clS5Og/8MFAjuUxvR0ZzZyEgs0mto8OWqY7QiQswDKMw5lOvP6UYJMARke3WhBLghIAVMdYD5dCK7U5UCYuSyBEB4rtdCa9ZZ+pnf93MQ5g2trYczGQ/SUOi/leBTOcNdLHcptSLRwzx/5PTHsnGPdDZWZpSJiNr+qzwHxjlFhU1l43xxMXk5DfMDpDwos6tRm/Fxg3IgAH9MTcZWYtHXggTU5GIeebp8bWtB3KZOH7HaKtrEILHY0PdobPA9gScwjDfUgcOR2wILPUVDho+mT/6TS/+ZrW23SdX02XzjeVs+GOb3",
                  "placeholder_text" : "/* Optional Follow \"A slightly less simple example of the RSA algorithm\" to make your cipherText harder to crack */"
                },
                {
                  "offset" : 2924,
                  "length" : 55,
                  "possible_answer" : "EqAQKGK09Nirj1SqZYd/t6T3YeY8/WoRH1wDdL2+nYpHAKXktghJ0rQHZJUu9pU2DIgPBN+NDkz+9VMdFEzksfbEhecxG9EsKz0Gzt7Q5NwBf0dJcVgBk+nBCLqSL9xIqGeuYm4Rj0VL9z31+DlCryPg/SEvtF/deL5crJDvAUR4McqYOHE18/2cRN0l4d6qOvprDDd50oEbEWG6GacmTnXwFubiyWoeIJFgiEcfty0=",
                  "placeholder_text" : "/* TODO Decode each value in cipherText and put in M */"
                },
                {
                  "offset" : 3146,
                  "length" : 54,
                  "possible_answer" : "q1o9b/exMuvpccgOkG27ZVItRAI3+1bEHWZeq3s3fmlRQ7khjbEpBwwcKVhFq8nNuvpAdriTCtEbWwP294nyHb8281o/HnWUjhI1/C4UnKdy6Zkcrs4wEtt3R/v/TTyi",
                  "placeholder_text" : "/* TODO Cast each value in D as a char and put in M */"
                },
                {
                  "offset" : 3573,
                  "length" : 115,
                  "possible_answer" : "wZJw8PzNp2rvTXPKbU7rSuQ1pv5cpVhqqqrZ6VAMvtBOFPfYCjcBE33JpHfOCM9S4oQNk5I9iwyO+Am1J51bVLc5/6iEET2f9pw2PnhIWa2E8/0YagU3+S57GOjedOv5a6A54KLuwU0Kf1eIh8cEwfYEiHxGikJir27Ffq19SvF0g2UmzEIOCLKQccZ0iTvEv7PnB74Ijslf8moVK2bHm/68x1oQvk/6qN6KSiY9hYUApQVj0+iBciMYxsoCExTn1wdwwSaHDm6O3CRJ4gzJ8FHny1IbSaVEIpswpMy0qlD/0Weh5QR3JXExfOU2tErrBoW5hyrcgNhg9gzeNTrxeA4P77i+doNQ81mMo6PFK8n3QgHYN0kOejB26V9SE/3URJLg7CfON7V4uqzG83AKT2amY1NxOjuImiG3Sc3eStJSjcMuYZg89S5O3I1lWHCsSsNny0dp+RBh4YSogWAzmG6XLiyiPXRcR8nAxUkXqv6dCi3igTykddIzjdMgbDPEY2Rw9vLqSgy/sLRThOd/sD/UiJm+JO3aFINMCai4d3Xv0THaVjpStc/F5PXvXqgCX3z4uX/WRC+Y8fIIFUAgm75ge8A0ZDYqQ3nQw15/oRMwczGFdS1a5nSkWr+/Rtp4NNruOKKT6UA6/t9SrgYJHu5/KZkEBQl6pW9QKFCX9xM=",
                  "placeholder_text" : "/* Optional Follow \"A slightly less simple example of the RSA algorithm\" to make your cipherText harder to crack */"
                },
                {
                  "offset" : 4499,
                  "length" : 41,
                  "possible_answer" : "q1o9b/exMuvpccgOkG27ZV93a9eZfFroWQn4nvdxNia5zl4jaIHzfV1fiFwUHfQh",
                  "placeholder_text" : "/* TODO Loop through arrayLength times */"
                },
                {
                  "offset" : 4576,
                  "length" : 47,
                  "possible_answer" : "dayGB42J+RXxikZ3ZGtywCD4uzqA61sMbfelNBZ+Plu5oPc/yZd3tzvsJcl3QnwO",
                  "placeholder_text" : "/* TODO Get hexSize characters of cipherText */"
                },
                {
                  "offset" : 4649,
                  "length" : 37,
                  "possible_answer" : "dayGB42J+RXxikZ3ZGtywAhuGtGjDETA/VEvIfXMa5I=",
                  "placeholder_text" : "/* TODO Remove str from cipherText */"
                }
              ],
              "is_visible" : true,
              "text" : "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"
            }
          },
          "description_text" : "<html>\n<body style=\"font-size:1em;\">\n<h2>RSA Encryption</h2>\n</p>\n\nRSA encryption allows coded messages to be sent without the sender (or any third-party)\nknowing how to decode the message. This encryption works using a public keys that is known to everyone\nand a private key that is known only by the receiver.\n\n</p><div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Public Key &lt;n, e&gt;: Encode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Select two distinct primes, <em>p</em> and <em>q</em>. We'll use primes from 127 to 200.</li>\n        <li>Multiply <em>p</em> and <em>q</em> to get <em>n</em>, the encryption modulus.\n            <ul><em>n = p * q</em> </ul></li>\n        <li>Select prime <em>e</em> that is less than n and relatively prime to <em>(p-1) * (q-1).</em>\n            <em>\n                <ul>φ(n) = (p-1) * (q-1)</ul>\n                <ul> 1 &lt; e &lt; φ (n)</ul>\n                <ul>gcd(e, d (n)) = 1 &emsp; i.e. φ (n) % e != 0</ul>\n            </em></li>\n        <li>Convert message String to ASCII values <em>bytes</em> from plain text <em>P</em>.\n            <ul><code>byte[] M = P.getBytes(StandardCharsets.UTF_8);</code></ul></li>\n        <li>Encrypt plain text <em>m</em> byte into cipher text <em>C</em> using public key &lt;n, e&gt;.\n            <em>\n                <ul> For each byte in M: m = byte</ul>\n                <ul> C ≡ m<sup>e</sup> mod n</ul>\n            </em></li>\n    </ol>\n\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 1em auto 0em;\">\n    Private Key&lt;n, d&gt;: Decode Message\n</div>\n\n<div style=\"\n            padding: .5em;\n            border: .05em solid lightgray;\n            margin: 0em auto 1em;\">\n    <ol>\n        <li>Determine private key <em>d</em>.\n            <em>\n                <ul>(k*d) mod φ(n) ≡ 1</ul>\n                <ul>d = (k * φ(n) + 1)/e &emsp; [let k = 0, 1, 2, 3 ...]</ul>\n                <ul>&emsp; i.e. Find lowest k where (k * φ(n) + 1) mod e ≡ 0</ul>\n            </em></li>\n        <li>Decrypt cipher text <em>C</em> from into decoded byte text <em>m</em> using private key &lt;n, d&gt;.\n            <em>\n                <ul> For each byte in C: c = C</ul>\n                <ul> M ≡ c<sup>d</sup> mod n</ul>\n            </em></li>\n        <li>Convert decoded byte text from ASCII values <em>M</em> to plain text <em>P</em>.\n            <ul><code>String P = new String(M, StandardCharsets.UTF_8);</code></ul></li>\n\n    </ol>\n</div>\n\n<p>Enter the correct code in the placeholder boxes as instructed.</p>\n\n<div class=\"hint\">\n    <ul>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/Maths.html\">RSA Maths API</a></li>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PublicKey.html\">RSA Public Key API</a></li>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PrivateKey.html\">RSA Private Key API</a></li>\n        <li>See <a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/RSA.html\">RSA API</a></li>\n        <li>Optional: <a href=\"https://www.di-mgt.com.au/rsa_alg.html#practicalkeygen\">A slightly less simple example of the RSA algorithm</a></li>\n    </ul>\n</div>\n\nReferences:\n<ul style=\"font-size:0.9em;\">\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/RSA.html\">RSA API</a></li>\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PrivateKey.html\">RSA Private Key API</a></li>\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/PublicKey.html\">RSA Public Key API</a></li>\n    <li><a href=\"https://txcodedancer.github.io/CSA_2021-2022/csa/java/rsa/Maths.html\">RSA Maths API</a></li>\n    <li><a href=\"https://www.di-mgt.com.au/rsa_alg.html#practicalkeygen\">A slightly less simple example of the RSA algorithm</a></li>\n    <li><a href=\"https://csawesome.runestone.academy/runestone/books/published/csawesome/index.html\">AP CS A Java Course</a></li>\n    <li><a href=\"https://www.javatpoint.com/rsa-encryption-algorithm\">javaTpoint: RSA Encryption Algorithm</a></li>\n    <li><a href=\"https://www.thejavaprogrammer.com/rsa-algorithm-in-java/\">The Java Programmer: RSA Algorithm in Java (Encryption and Decryption)</a></li>\n    <li><a href=\"https://www.asciitable.com/\">ASCII Table</a></li>\n    <li><a href=\"https://mkyong.com/java/how-to-convert-character-to-ascii-in-java/\">Mkyong.com: Java – Convert Character to ASCII</a></li>\n    <li><a href=\"https://www.youtube.com/embed/4zahvcJ9glg\" target=\"_blank\">The RSA Encryption Algorithm (1 of 2: Computing an Example)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/oOcTVTpUsPQ\" target=\"_blank\">The RSA Encryption Algorithm (2 of 2: Generating the Keys)</a></li>\n    <li><a href=\"https://www.youtube.com/embed/sBO3gH1uGzQ?end=190\" target=\"_blank\">RSA encryption in 5 minutes</a></li>\n</ul>\n<p>Click <strong>'Check'</strong> verify your solution.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "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"
    }
  ],
  "version" : 12,
  "edu_plugin_version" : "2021.9-2021.2-512"
}